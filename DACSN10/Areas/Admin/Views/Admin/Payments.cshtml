@model List<DACSN10.Models.Payment>
@{
    ViewData["Title"] = "Quản lý thanh toán";
    var currentPage = ViewBag.Page ?? 1;
    var totalPages = ViewBag.TotalPages ?? 1;
    var status = ViewBag.Status ?? "";
    var search = ViewBag.Search ?? "";
    var fromDate = ViewBag.FromDate;
    var toDate = ViewBag.ToDate;
}

@{
	Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Breadcrumb {
    <li class="breadcrumb-item active">Quản lý thanh toán</li>
}

@section Styles {
    <style>
        .payment-card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            margin-bottom: 1.5rem;
            border-left: 4px solid transparent;
        }

            .payment-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
            }

            .payment-card.pending {
                border-left-color: #f59e0b;
            }

            .payment-card.success {
                border-left-color: #10b981;
            }

            .payment-card.failed {
                border-left-color: #ef4444;
            }

            .payment-card.rejected {
                border-left-color: #6b7280;
            }

        .payment-header {
            display: flex;
            justify-content: between;
            align-items: center;
            padding: 1.5rem;
            background: #f8fafc;
            border-bottom: 1px solid #e2e8f0;
        }

        .payment-amount {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--admin-success);
        }

        .payment-id {
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            color: var(--admin-secondary);
        }

        .payment-body {
            padding: 1.5rem;
        }

        .payment-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .info-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .info-icon {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.9rem;
            color: white;
        }

        .payment-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .revenue-summary {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }

        .revenue-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .revenue-card {
            text-align: center;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 8px;
        }

        .revenue-number {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .revenue-label {
            color: var(--admin-secondary);
            font-size: 0.9rem;
        }

        .status-filter-pills {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }

        .status-pill {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            border: 2px solid transparent;
            background: #f1f5f9;
            color: #64748b;
            text-decoration: none;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

            .status-pill.active,
            .status-pill:hover {
                border-color: var(--admin-primary);
                background: rgba(59, 130, 246, 0.1);
                color: var(--admin-primary);
            }

        .payment-timeline {
            position: relative;
            padding-left: 2rem;
        }

            .payment-timeline::before {
                content: '';
                position: absolute;
                left: 8px;
                top: 0;
                bottom: 0;
                width: 2px;
                background: #e2e8f0;
            }

        .timeline-item {
            position: relative;
            margin-bottom: 1rem;
        }

            .timeline-item::before {
                content: '';
                position: absolute;
                left: -6px;
                top: 6px;
                width: 12px;
                height: 12px;
                border-radius: 50%;
                background: var(--admin-primary);
            }
    </style>
}

<!-- Revenue Summary -->
<div class="revenue-summary" data-aos="fade-up">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h5 class="mb-0"><i class="fas fa-chart-line me-2"></i>Tổng quan doanh thu</h5>
        <div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary active" onclick="loadRevenueSummary('today')">Hôm nay</button>
            <button class="btn btn-outline-primary" onclick="loadRevenueSummary('week')">Tuần này</button>
            <button class="btn btn-outline-primary" onclick="loadRevenueSummary('month')">Tháng này</button>
        </div>
    </div>

    <div class="revenue-cards" id="revenueCards">
        <div class="revenue-card">
            <div class="revenue-number text-success" id="totalRevenue">0₫</div>
            <div class="revenue-label">Tổng doanh thu</div>
        </div>
        <div class="revenue-card">
            <div class="revenue-number text-primary" id="totalTransactions">0</div>
            <div class="revenue-label">Giao dịch thành công</div>
        </div>
        <div class="revenue-card">
            <div class="revenue-number text-warning" id="pendingAmount">0₫</div>
            <div class="revenue-label">Chờ duyệt</div>
        </div>
        <div class="revenue-card">
            <div class="revenue-number text-info" id="averageTransaction">0₫</div>
            <div class="revenue-label">Trung bình/giao dịch</div>
        </div>
    </div>
</div>

<!-- Filters and Search -->
<div class="filters-card" data-aos="fade-up" data-aos-delay="100">
    <form method="GET" action="/Admin/Payments" class="row g-3">
        <div class="col-md-3">
            <label for="search" class="form-label">Tìm kiếm</label>
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" class="form-control" id="search" name="search"
                       value="@search" placeholder="Tên, email, khóa học...">
            </div>
        </div>

        <div class="col-md-2">
            <label for="status" class="form-label">Trạng thái</label>
            <select class="form-select" id="status" name="status">
                <option value="">Tất cả</option>
                <option value="Pending" @(status == "Pending" ? "selected" : "")>Chờ duyệt</option>
                <option value="WaitingConfirm" @(status == "WaitingConfirm" ? "selected" : "")>Chờ xác nhận</option>
                <option value="Success" @(status == "Success" ? "selected" : "")>Thành công</option>
                <option value="Failed" @(status == "Failed" ? "selected" : "")>Thất bại</option>
                <option value="Rejected" @(status == "Rejected" ? "selected" : "")>Từ chối</option>
            </select>
        </div>

        <div class="col-md-2">
            <label for="fromDate" class="form-label">Từ ngày</label>
            <input type="date" class="form-control" id="fromDate" name="fromDate"
                   value="@(fromDate?.ToString("yyyy-MM-dd"))">
        </div>

        <div class="col-md-2">
            <label for="toDate" class="form-label">Đến ngày</label>
            <input type="date" class="form-control" id="toDate" name="toDate"
                   value="@(toDate?.ToString("yyyy-MM-dd"))">
        </div>

        <div class="col-md-3 d-flex align-items-end">
            <button type="submit" class="btn btn-admin-primary me-2">
                <i class="fas fa-filter me-1"></i>Lọc
            </button>
            <a href="/Admin/Payments" class="btn btn-outline-secondary me-2">
                <i class="fas fa-times"></i>
            </a>
            <button type="button" class="btn btn-outline-info" onclick="exportPayments()">
                <i class="fas fa-download me-1"></i>Xuất
            </button>
        </div>
    </form>
</div>

<!-- Status Filter Pills -->
<div class="status-filter-pills" data-aos="fade-up" data-aos-delay="200">
    <a href="/Admin/Payments" class="status-pill @(string.IsNullOrEmpty(status) ? "active" : "")">
        <i class="fas fa-list me-1"></i>Tất cả
    </a>
    <a href="/Admin/Payments?status=Pending" class="status-pill @(status == "Pending" ? "active" : "")">
        <i class="fas fa-clock me-1"></i>Chờ duyệt
    </a>
    <a href="/Admin/Payments?status=WaitingConfirm" class="status-pill @(status == "WaitingConfirm" ? "active" : "")">
        <i class="fas fa-hourglass-half me-1"></i>Chờ xác nhận
    </a>
    <a href="/Admin/Payments?status=Success" class="status-pill @(status == "Success" ? "active" : "")">
        <i class="fas fa-check me-1"></i>Thành công
    </a>
    <a href="/Admin/Payments?status=Failed" class="status-pill @(status == "Failed" ? "active" : "")">
        <i class="fas fa-times me-1"></i>Thất bại
    </a>
    <a href="/Admin/Payments?status=Rejected" class="status-pill @(status == "Rejected" ? "active" : "")">
        <i class="fas fa-ban me-1"></i>Từ chối
    </a>
</div>

<!-- Action Bar -->
<div class="d-flex justify-content-between align-items-center mb-4" data-aos="fade-up" data-aos-delay="300">
    <div>
        <h4 class="mb-0">Danh sách giao dịch</h4>
        <p class="text-muted mb-0">Quản lý tất cả giao dịch thanh toán</p>
    </div>

    <div class="d-flex gap-2">
        <button class="btn btn-admin-warning" onclick="toggleBulkActions()">
            <i class="fas fa-tasks me-1"></i>Thao tác hàng loạt
        </button>
        <button class="btn btn-admin-success" onclick="bulkApprovePayments()">
            <i class="fas fa-check me-1"></i>Duyệt hàng loạt
        </button>
    </div>
</div>

<!-- Bulk Actions Bar -->
<div class="bulk-actions" id="bulkActionsBar">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <span class="fw-bold">Đã chọn: <span id="selectedCount">0</span> giao dịch</span>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-admin-success btn-sm" onclick="bulkApprovePayments()">
                <i class="fas fa-check me-1"></i>Duyệt tất cả
            </button>
            <button class="btn btn-admin-danger btn-sm" onclick="bulkRejectPayments()">
                <i class="fas fa-times me-1"></i>Từ chối tất cả
            </button>
            <button class="btn btn-outline-secondary btn-sm" onclick="clearSelection()">
                <i class="fas fa-times me-1"></i>Bỏ chọn
            </button>
        </div>
    </div>
</div>

<!-- Payments Grid -->
<div class="row" id="paymentsGrid">
    @if (Model != null && Model.Any())
    {
        @foreach (var payment in Model)
        {
            <div class="col-xl-6 col-lg-12 mb-4" data-aos="fade-up" data-aos-delay="400">
                <div class="payment-card @payment.Status.ToString().ToLower()">
                    <div class="payment-header">
                        <div class="d-flex align-items-center">
                            <input type="checkbox" class="form-check-input payment-checkbox me-3"
                                   value="@payment.PaymentID" style="transform: scale(1.2);">
                            <div>
                                <div class="payment-amount">@payment.SoTien.ToString("N0")₫</div>
                                <div class="payment-id">#@payment.PaymentID.ToString("D6")</div>
                            </div>
                        </div>

                        <div class="text-end">
                            @if (payment != null)
                            {
                                switch (payment.Status)
                                {
                                    case DACSN10.Models.PaymentStatus.WaitingConfirm:
                                        <span class="badge bg-info">Chờ xác nhận</span>
                                        break;
                                    case DACSN10.Models.PaymentStatus.Success:
                                        <span class="badge bg-success">Thành công</span>
                                        break;
                                    case DACSN10.Models.PaymentStatus.Failed:
                                        <span class="badge bg-danger">Thất bại</span>
                                        break;
                                    case DACSN10.Models.PaymentStatus.Rejected:
                                        <span class="badge bg-secondary">Từ chối</span>
                                        break;
                                    default:
                                        <span class="badge bg-secondary">@payment.Status</span>
                                        break;
                                }
                            }
                            else
                            {
                                <span class="badge bg-warning">No payment data available</span>
                            }
                            <small class="text-muted">@payment.NgayThanhToan.ToString("dd/MM/yyyy HH:mm")</small>
                        </div>
                    </div>

                    <div class="payment-body">
                        <div class="payment-info">
                            <div class="info-item">
                                <div class="info-icon" style="background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);">
                                    <i class="fas fa-user"></i>
                                </div>
                                <div>
                                    <div class="fw-semibold">@(payment.User?.HoTen ?? "Không xác định")</div>
                                    <small class="text-muted">@(payment.User?.Email ?? "Không có email")</small>
                                </div>
                            </div>

                            <div class="info-item">
                                <div class="info-icon" style="background: linear-gradient(135deg, #10b981 0%, #059669 100%);">
                                    <i class="fas fa-book-open"></i>
                                </div>
                                <div>
                                    <div class="fw-semibold">@(payment.Course?.TenKhoaHoc ?? "Không xác định")</div>
                                    <small class="text-muted">@(payment.Course?.User?.HoTen ?? "Không xác định")</small>
                                </div>
                            </div>

                            <div class="info-item">
                                <div class="info-icon" style="background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);">
                                    <i class="fas fa-credit-card"></i>
                                </div>
                                <div>
                                    <div class="fw-semibold">@(payment.PhuongThucThanhToan ?? "Không xác định")</div>
                                    <small class="text-muted">Phương thức thanh toán</small>
                                </div>
                            </div>

                            <div class="info-item">
                                <div class="info-icon" style="background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);">
                                    <i class="fas fa-calendar"></i>
                                </div>
                                <div>
                                    <div class="fw-semibold">@payment.NgayThanhToan.ToString("dd/MM/yyyy")</div>
                                    <small class="text-muted">@payment.NgayThanhToan.ToString("HH:mm")</small>
                                </div>
                            </div>
                        </div>

                        <div class="payment-actions">
                            <a href="/Admin/PaymentDetails/@payment.PaymentID"
                               class="btn btn-outline-primary btn-sm">
                                <i class="fas fa-eye me-1"></i>Chi tiết
                            </a>

                            @if (payment.Status == DACSN10.Models.PaymentStatus.WaitingConfirm || payment.Status == DACSN10.Models.PaymentStatus.Pending)
                            {
                                <button class="btn btn-admin-success btn-sm"
                                        onclick="approvePayment(@payment.PaymentID)">
                                    <i class="fas fa-check me-1"></i>Duyệt
                                </button>
                                <button class="btn btn-admin-danger btn-sm"
                                        onclick="rejectPayment(@payment.PaymentID)">
                                    <i class="fas fa-times me-1"></i>Từ chối
                                </button>
                            }

                            @if (payment.Status == DACSN10.Models.PaymentStatus.Success)
                            {
                                <button class="btn btn-outline-info btn-sm"
                                        onclick="sendReceipt(@payment.PaymentID)">
                                    <i class="fas fa-receipt me-1"></i>Gửi hóa đơn
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="text-center py-5">
                <i class="fas fa-credit-card fa-5x text-muted mb-3"></i>
                <h4 class="text-muted">Chưa có giao dịch nào</h4>
                <p class="text-muted">Các giao dịch thanh toán sẽ hiển thị ở đây</p>
            </div>
        </div>
    }
</div>

<!-- Pagination -->
@if (totalPages > 1)
{
    <nav aria-label="Payment pagination" data-aos="fade-up" data-aos-delay="500">
        <ul class="pagination justify-content-center">
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="/Admin/Payments?page=@(currentPage - 1)&status=@status&search=@search&fromDate=@fromDate&toDate=@toDate">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
            }

            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link" href="/Admin/Payments?page=@i&status=@status&search=@search&fromDate=@fromDate&toDate=@toDate">@i</a>
                </li>
            }

            @if (currentPage < totalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="/Admin/Payments?page=@(currentPage + 1)&status=@status&search=@search&fromDate=@fromDate&toDate=@toDate">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            }
        </ul>
    </nav>
}

<!-- Payment Detail Modal -->
<div class="modal fade" id="paymentDetailModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-receipt me-2"></i>Chi tiết giao dịch
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="paymentDetailContent">
                <!-- Payment details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" onclick="printPaymentDetail()">
                    <i class="fas fa-print me-1"></i>In hóa đơn
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Individual checkbox change
            $('.payment-checkbox').change(function() {
                updateSelectedCount();
            });

            // Load initial revenue summary
            loadRevenueSummary('today');

            // Auto-refresh every 30 seconds for pending payments
            setInterval(function() {
                if ($('.status-pill.active').text().includes('Chờ')) {
                    console.log('Checking for payment updates...');
                    // Optionally reload the page or specific sections
                }
            }, 30000);
        });

        function updateSelectedCount() {
            const selectedCount = $('.payment-checkbox:checked').length;
            $('#selectedCount').text(selectedCount);

            if (selectedCount > 0) {
                $('#bulkActionsBar').show();
            } else {
                $('#bulkActionsBar').hide();
            }
        }

        function toggleBulkActions() {
            $('#bulkActionsBar').toggle();
        }

        function clearSelection() {
            $('.payment-checkbox').prop('checked', false);
            updateSelectedCount();
        }

        function loadRevenueSummary(period) {
            // Update active button
            $('.revenue-summary .btn-group .btn').removeClass('active');
            $(`button[onclick="loadRevenueSummary('${period}')"]`).addClass('active');

            // Simulate loading revenue data
            showLoading();

            setTimeout(() => {
                hideLoading();

                // Update with sample data - in real app, this would be an AJAX call
                const data = {
                    today: {
                        revenue: '1,250,000₫',
                        transactions: 8,
                        pending: '350,000₫',
                        average: '156,250₫'
                    },
                    week: {
                        revenue: '8,750,000₫',
                        transactions: 42,
                        pending: '1,200,000₫',
                        average: '208,333₫'
                    },
                    month: {
                        revenue: '25,300,000₫',
                        transactions: 156,
                        pending: '2,850,000₫',
                        average: '162,179₫'
                    }
                };

                const periodData = data[period];
                $('#totalRevenue').text(periodData.revenue);
                $('#totalTransactions').text(periodData.transactions);
                $('#pendingAmount').text(periodData.pending);
                $('#averageTransaction').text(periodData.average);

            }, 500);
        }

        function approvePayment(paymentId) {
            Swal.fire({
                title: 'Duyệt thanh toán?',
                text: 'Bạn có chắc chắn muốn duyệt giao dịch này?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#10b981',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Duyệt',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoading();

                    $.post('/Admin/ApprovePayment', {
                        id: paymentId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    })
                    .done(function(response) {
                        hideLoading();
                        if (response.success) {
                            showSuccess(response.message);
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showError(response.message);
                        }
                    })
                    .fail(function() {
                        hideLoading();
                        showError('Có lỗi xảy ra khi duyệt thanh toán!');
                    });
                }
            });
        }

        function rejectPayment(paymentId) {
            Swal.fire({
                title: 'Từ chối thanh toán?',
                input: 'textarea',
                inputLabel: 'Lý do từ chối',
                inputPlaceholder: 'Nhập lý do từ chối giao dịch...',
                inputAttributes: {
                    'aria-label': 'Lý do từ chối'
                },
                showCancelButton: true,
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Từ chối',
                cancelButtonText: 'Hủy',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Vui lòng nhập lý do từ chối!'
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoading();

                    $.post('/Admin/RejectPayment', {
                        id: paymentId,
                        reason: result.value,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    })
                    .done(function(response) {
                        hideLoading();
                        if (response.success) {
                            showSuccess(response.message);
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showError(response.message);
                        }
                    })
                    .fail(function() {
                        hideLoading();
                        showError('Có lỗi xảy ra khi từ chối thanh toán!');
                    });
                }
            });
        }

        function bulkApprovePayments() {
            const selectedPayments = $('.payment-checkbox:checked').map(function() {
                return $(this).val();
            }).get();

            if (selectedPayments.length === 0) {
                showWarning('Vui lòng chọn ít nhất một giao dịch!');
                return;
            }

            Swal.fire({
                title: 'Duyệt hàng loạt?',
                text: `Bạn có chắc chắn muốn duyệt ${selectedPayments.length} giao dịch đã chọn?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#10b981',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Duyệt tất cả',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoading();

                    $.post('/Admin/BulkApprovePayments', {
                        paymentIds: selectedPayments,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    })
                    .done(function(response) {
                        hideLoading();
                        if (response.success) {
                            showSuccess(response.message);
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showError(response.message);
                        }
                    })
                    .fail(function() {
                        hideLoading();
                        showError('Có lỗi xảy ra khi duyệt hàng loạt!');
                    });
                }
            });
        }

        function bulkRejectPayments() {
            const selectedPayments = $('.payment-checkbox:checked').map(function() {
                return $(this).val();
            }).get();

            if (selectedPayments.length === 0) {
                showWarning('Vui lòng chọn ít nhất một giao dịch!');
                return;
            }

            Swal.fire({
                title: 'Từ chối hàng loạt?',
                input: 'textarea',
                inputLabel: 'Lý do từ chối',
                inputPlaceholder: 'Nhập lý do từ chối các giao dịch...',
                text: `Bạn có chắc chắn muốn từ chối ${selectedPayments.length} giao dịch đã chọn?`,
                showCancelButton: true,
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Từ chối tất cả',
                cancelButtonText: 'Hủy',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Vui lòng nhập lý do từ chối!'
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoading();

                    $.post('/Admin/BulkRejectPayments', {
                        paymentIds: selectedPayments,
                        reason: result.value,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    })
                    .done(function(response) {
                        hideLoading();
                        if (response.success) {
                            showSuccess(response.message);
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showError(response.message);
                        }
                    })
                    .fail(function() {
                        hideLoading();
                        showError('Có lỗi xảy ra khi từ chối hàng loạt!');
                    });
                }
            });
        }

        function sendReceipt(paymentId) {
            showLoading();

            // Simulate sending receipt
            setTimeout(() => {
                hideLoading();
                showSuccess('Đã gửi hóa đơn thành công!');
            }, 1000);
        }

        function exportPayments() {
            const params = new URLSearchParams();

            if ($('#status').val()) params.append('status', $('#status').val());
            if ($('#search').val()) params.append('search', $('#search').val());
            if ($('#fromDate').val()) params.append('fromDate', $('#fromDate').val());
            if ($('#toDate').val()) params.append('toDate', $('#toDate').val());

            window.open(`/Admin/ExportPayments?${params.toString()}`, '_blank');
        }

        function printPaymentDetail() {
            window.print();
        }

        // Real-time payment status updates
        function checkPaymentUpdates() {
            // This would typically use SignalR or polling
            console.log('Checking for payment updates...');
        }

        // Check for updates every minute
        setInterval(checkPaymentUpdates, 60000);
    </script>

    @Html.AntiForgeryToken()
}