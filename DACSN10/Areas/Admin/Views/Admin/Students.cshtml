@model List<DACSN10.Models.User>
@{
    ViewData["Title"] = "Quản lý học viên";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    var currentPage = ViewBag.Page ?? 1;
    var totalPages = ViewBag.TotalPages ?? 1;
    var status = ViewBag.Status ?? "";
    var search = ViewBag.Search ?? "";
}

@section Breadcrumb {
    <li class="breadcrumb-item active">Quản lý học viên</li>
}

@section Styles {
    <style>
        .student-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
        }

        .student-card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            margin-bottom: 1.5rem;
        }

            .student-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
            }

        .student-header {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
            padding: 1.5rem;
            text-align: center;
        }

        .student-avatar-large {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .student-name {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .student-email {
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .student-body {
            padding: 1.5rem;
        }

        .student-stats {
            display: flex;
            justify-content: space-around;
            margin: 1rem 0;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 8px;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--admin-primary);
        }

        .stat-label {
            font-size: 0.8rem;
            color: var(--admin-secondary);
        }

        .activity-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .activity-online {
            background: #10b981;
            box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.3);
        }

        .activity-offline {
            background: #6b7280;
        }

        .enrollment-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: var(--admin-primary);
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            font-size: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
        }
    </style>
}

<!-- Filters and Search -->
<div class="filters-card" data-aos="fade-up">
    <form method="GET" action="/Admin/Admin/Students" class="row g-3">
        <div class="col-md-4">
            <label for="search" class="form-label">Tìm kiếm</label>
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" class="form-control" id="search" name="search"
                       value="@search" placeholder="Tên, email, số điện thoại...">
            </div>
        </div>

        <div class="col-md-3">
            <label for="status" class="form-label">Trạng thái</label>
            <select class="form-select" id="status" name="status">
                <option value="">Tất cả</option>
                <option value="Active" @(status == "Active" ? "selected" : "")>Hoạt động</option>
                <option value="Locked" @(status == "Locked" ? "selected" : "")>Bị khóa</option>
                <option value="Pending" @(status == "Pending" ? "selected" : "")>Chờ xác thực</option>
            </select>
        </div>

        <div class="col-md-3">
            <label for="joinDate" class="form-label">Ngày tham gia</label>
            <select class="form-select" id="joinDate" name="joinDate">
                <option value="">Tất cả</option>
                <option value="today">Hôm nay</option>
                <option value="week">Tuần này</option>
                <option value="month">Tháng này</option>
                <option value="year">Năm này</option>
            </select>
        </div>

        <div class="col-md-2 d-flex align-items-end">
            <button type="submit" class="btn btn-admin-primary me-2">
                <i class="fas fa-filter me-1"></i>Lọc
            </button>
            <a href="/Admin/Admin/Students" class="btn btn-outline-secondary">
                <i class="fas fa-times"></i>
            </a>
        </div>
    </form>
</div>

<!-- Action Bar -->
<div class="d-flex justify-content-between align-items-center mb-4" data-aos="fade-up" data-aos-delay="100">
    <div>
        <h4 class="mb-0">Danh sách học viên</h4>
        <p class="text-muted mb-0">Quản lý tất cả học viên trong hệ thống</p>
    </div>

    <div class="d-flex gap-2">
        <div class="dropdown">
            <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                <i class="fas fa-download me-1"></i>Xuất dữ liệu
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="/Admin/Admin/ExportUsers?userType=User"><i class="fas fa-file-excel me-2"></i>Excel</a></li>
                <li><a class="dropdown-item" href="#" onclick="printStudents()"><i class="fas fa-print me-2"></i>In danh sách</a></li>
            </ul>
        </div>

        <button class="btn btn-admin-warning" onclick="toggleBulkActions()">
            <i class="fas fa-tasks me-1"></i>Thao tác hàng loạt
        </button>

        <a href="/Admin/Admin/CreateStudent" class="btn btn-admin-primary">
            <i class="fas fa-user-plus me-1"></i>Thêm học viên
        </a>
    </div>
</div>

<!-- Bulk Actions Bar -->
<div class="bulk-actions" id="bulkActionsBar">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <span class="fw-bold">Đã chọn: <span id="selectedCount">0</span> học viên</span>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-admin-success btn-sm" onclick="bulkPromoteToTeacher()">
                <i class="fas fa-chalkboard-teacher me-1"></i>Cấp quyền giảng viên
            </button>
            <button class="btn btn-admin-warning btn-sm" onclick="bulkLockStudents()">
                <i class="fas fa-lock me-1"></i>Khóa tài khoản
            </button>
            <button class="btn btn-admin-danger btn-sm" onclick="bulkDeleteStudents()">
                <i class="fas fa-trash me-1"></i>Xóa tài khoản
            </button>
            <button class="btn btn-outline-secondary btn-sm" onclick="clearSelection()">
                <i class="fas fa-times me-1"></i>Bỏ chọn
            </button>
        </div>
    </div>
</div>

<!-- Students Grid -->
<div class="row" id="studentsGrid">
    @if (Model != null && Model.Any())
    {
        @foreach (var student in Model)
        {
            <div class="col-xl-4 col-lg-6 col-md-6 mb-4" data-aos="fade-up" data-aos-delay="200">
                <div class="student-card">
                    <div class="position-relative">
                        <div class="student-header">
                            <div class="position-absolute top-0 end-0 p-2">
                                <input type="checkbox" class="form-check-input student-checkbox"
                                       value="@student.Id" style="transform: scale(1.2);">
                            </div>

                            <img src="https://ui-avatars.com/api/?name=@Uri.EscapeDataString(student.HoTen ?? "Student")&background=fff&color=3b82f6&bold=true&size=80"
                                 alt="@student.HoTen" class="student-avatar-large">

                            <div class="student-name">@student.HoTen</div>
                            <div class="student-email">@student.Email</div>

                            <div class="mt-2">
                                @switch (student.TrangThai)
                                {
                                    case "Active":
                                        <span class="badge bg-success">
                                            <span class="activity-indicator activity-online"></span>Hoạt động
                                        </span>
                                        break;
                                    case "Locked":
                                        <span class="badge bg-danger">
                                            <span class="activity-indicator activity-offline"></span>Bị khóa
                                        </span>
                                        break;
                                    default:
                                        <span class="badge bg-secondary">
                                            <span class="activity-indicator activity-offline"></span>@student.TrangThai
                                        </span>
                                        break;
                                }
                            </div>
                        </div>
                    </div>

                    <div class="student-body">
                        <div class="student-stats">
                            <div class="stat-item">
                                <div class="stat-number">@(student.Enrollments?.Count ?? 0)</div>
                                <div class="stat-label">Khóa học</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">@(student.QuizResults?.Count ?? 0)</div>
                                <div class="stat-label">Bài kiểm tra</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">
                                    @{
                                        var completedCourses = student.Enrollments?.Count(e => e.Progress >= 100) ?? 0;
                                    }
                                    @completedCourses
                                </div>
                                <div class="stat-label">Hoàn thành</div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <small class="text-muted">
                                <i class="fas fa-calendar me-1"></i>Tham gia: @student.NgayDangKy.ToString("dd/MM/yyyy")
                            </small>
                            @if (!string.IsNullOrEmpty(student.PhoneNumber))
                            {
                                <br>
                                <small class="text-muted">
                                    <i class="fas fa-phone me-1"></i>@student.PhoneNumber
                                </small>
                            }
                        </div>

                        <div class="d-flex justify-content-between">
                            <div class="btn-group" role="group">
                                <a href="/Admin/Admin/StudentDetails/@student.Id"
                                   class="btn btn-outline-primary btn-sm" title="Xem chi tiết">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a href="/Admin/Admin/EditStudent/@student.Id"
                                   class="btn btn-outline-warning btn-sm" title="Chỉnh sửa">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button class="btn btn-outline-info btn-sm"
                                        onclick="promoteToTeacher('@student.Id')" title="Cấp quyền giảng viên">
                                    <i class="fas fa-chalkboard-teacher"></i>
                                </button>
                            </div>

                            <div class="btn-group" role="group">
                                @if (student.TrangThai == "Active")
                                {
                                    <button class="btn btn-outline-warning btn-sm"
                                            onclick="lockStudent('@student.Id')" title="Khóa tài khoản">
                                        <i class="fas fa-lock"></i>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-outline-success btn-sm"
                                            onclick="lockStudent('@student.Id')" title="Mở khóa tài khoản">
                                        <i class="fas fa-unlock"></i>
                                    </button>
                                }
                                <button class="btn btn-outline-danger btn-sm"
                                        onclick="deleteStudent('@student.Id')" title="Xóa tài khoản">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="text-center py-5">
                <i class="fas fa-user-graduate fa-5x text-muted mb-3"></i>
                <h4 class="text-muted">Chưa có học viên nào</h4>
                <p class="text-muted">Các học viên sẽ hiển thị ở đây khi họ đăng ký tài khoản</p>
                <a href="/Admin/Admin/CreateStudent" class="btn btn-admin-primary">
                    <i class="fas fa-user-plus me-2"></i>Thêm học viên mới
                </a>
            </div>
        </div>
    }
</div>

<!-- Pagination -->
@if (totalPages > 1)
{
    <nav aria-label="Student pagination" data-aos="fade-up" data-aos-delay="500">
        <ul class="pagination justify-content-center">
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="/Admin/Admin/Students?page=@(currentPage - 1)&status=@status&search=@search">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
            }

            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link" href="/Admin/Admin/Students?page=@i&status=@status&search=@search">@i</a>
                </li>
            }

            @if (currentPage < totalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="/Admin/Admin/Students?page=@(currentPage + 1)&status=@status&search=@search">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            }
        </ul>
    </nav>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Individual checkbox change
            $('.student-checkbox').change(function() {
                updateSelectedCount();
            });

            // Load statistics
            loadStudentStatistics();
        });

        function updateSelectedCount() {
            const selectedCount = $('.student-checkbox:checked').length;
            $('#selectedCount').text(selectedCount);

            if (selectedCount > 0) {
                $('#bulkActionsBar').show();
            } else {
                $('#bulkActionsBar').hide();
            }
        }

        function toggleBulkActions() {
            $('#bulkActionsBar').toggle();
        }

        function clearSelection() {
            $('.student-checkbox').prop('checked', false);
            updateSelectedCount();
        }

        function loadStudentStatistics() {
            // Load additional statistics if needed
            console.log('Loading student statistics...');
        }

        function promoteToTeacher(studentId) {
            Swal.fire({
                title: 'Cấp quyền giảng viên?',
                text: 'Bạn có chắc chắn muốn cấp quyền giảng viên cho học viên này?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#10b981',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Cấp quyền',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoading();

                    $.post('/Admin/Admin/PromoteToTeacher', {
                        id: studentId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    })
                    .done(function(response) {
                        hideLoading();
                        if (response.success) {
                            showSuccess(response.message);
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showError(response.message);
                        }
                    })
                    .fail(function() {
                        hideLoading();
                        showError('Có lỗi xảy ra khi cấp quyền!');
                    });
                }
            });
        }

        function lockStudent(studentId) {
            Swal.fire({
                title: 'Thay đổi trạng thái tài khoản?',
                text: 'Bạn có chắc chắn muốn thay đổi trạng thái tài khoản này?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#f59e0b',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Thay đổi',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoading();

                    $.post('/Admin/Admin/LockStudent', {
                        id: studentId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    })
                    .done(function(response) {
                        hideLoading();
                        if (response.success) {
                            showSuccess(response.message);
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showError(response.message);
                        }
                    })
                    .fail(function() {
                        hideLoading();
                        showError('Có lỗi xảy ra khi thay đổi trạng thái!');
                    });
                }
            });
        }

        function deleteStudent(studentId) {
            confirmDelete('Xóa tài khoản học viên?',
                'Bạn có chắc chắn muốn xóa tài khoản này? Hành động này không thể hoàn tác!',
                function() {
                    showLoading();

                    $.post('/Admin/Admin/DeleteStudent', {
                        id: studentId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    })
                    .done(function(response) {
                        hideLoading();
                        if (response.success) {
                            showSuccess(response.message);
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showError(response.message);
                        }
                    })
                    .fail(function() {
                        hideLoading();
                        showError('Có lỗi xảy ra khi xóa tài khoản!');
                    });
                }
            );
        }

        function bulkPromoteToTeacher() {
            const selectedStudents = $('.student-checkbox:checked').map(function() {
                return $(this).val();
            }).get();

            if (selectedStudents.length === 0) {
                showWarning('Vui lòng chọn ít nhất một học viên!');
                return;
            }

            Swal.fire({
                title: 'Cấp quyền giảng viên hàng loạt?',
                text: `Bạn có chắc chắn muốn cấp quyền giảng viên cho ${selectedStudents.length} học viên đã chọn?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#10b981',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Cấp quyền tất cả',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoading();

                    // Process each student individually for promotion
                    let completed = 0;
                    let errors = 0;

                    selectedStudents.forEach(function(studentId) {
                        $.post('/Admin/Admin/PromoteToTeacher', {
                            id: studentId,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        })
                        .done(function(response) {
                            completed++;
                            if (!response.success) errors++;

                            if (completed === selectedStudents.length) {
                                hideLoading();
                                if (errors === 0) {
                                    showSuccess(`Đã cấp quyền thành công cho ${completed} học viên!`);
                                } else {
                                    showWarning(`Hoàn thành với ${errors} lỗi. ${completed - errors} thành công.`);
                                }
                                setTimeout(() => location.reload(), 1500);
                            }
                        })
                        .fail(function() {
                            completed++;
                            errors++;

                            if (completed === selectedStudents.length) {
                                hideLoading();
                                showError(`Có ${errors} lỗi xảy ra trong quá trình xử lý!`);
                                setTimeout(() => location.reload(), 1500);
                            }
                        });
                    });
                }
            });
        }

        function bulkLockStudents() {
            const selectedStudents = $('.student-checkbox:checked').map(function() {
                return $(this).val();
            }).get();

            if (selectedStudents.length === 0) {
                showWarning('Vui lòng chọn ít nhất một học viên!');
                return;
            }

            Swal.fire({
                title: 'Khóa tài khoản hàng loạt?',
                text: `Bạn có chắc chắn muốn khóa ${selectedStudents.length} tài khoản đã chọn?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#f59e0b',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Khóa tất cả',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoading();

                    $.post('/Admin/Admin/BulkLockUsers', {
                        userIds: selectedStudents,
                        lockStatus: true,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    })
                    .done(function(response) {
                        hideLoading();
                        if (response.success) {
                            showSuccess(response.message);
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showError(response.message);
                        }
                    })
                    .fail(function() {
                        hideLoading();
                        showError('Có lỗi xảy ra khi khóa tài khoản hàng loạt!');
                    });
                }
            });
        }

        function bulkDeleteStudents() {
            const selectedStudents = $('.student-checkbox:checked').map(function() {
                return $(this).val();
            }).get();

            if (selectedStudents.length === 0) {
                showWarning('Vui lòng chọn ít nhất một học viên!');
                return;
            }

            confirmDelete('Xóa hàng loạt?',
                `Bạn có chắc chắn muốn xóa ${selectedStudents.length} tài khoản đã chọn? Hành động này không thể hoàn tác!`,
                function() {
                    showLoading();

                    // Process deletions individually since bulk delete might not be implemented
                    let completed = 0;
                    let errors = 0;

                    selectedStudents.forEach(function(studentId) {
                        $.post('/Admin/Admin/DeleteStudent', {
                            id: studentId,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        })
                        .done(function(response) {
                            completed++;
                            if (!response.success) errors++;

                            if (completed === selectedStudents.length) {
                                hideLoading();
                                if (errors === 0) {
                                    showSuccess(`Đã xóa thành công ${completed} tài khoản!`);
                                } else {
                                    showWarning(`Hoàn thành với ${errors} lỗi. ${completed - errors} thành công.`);
                                }
                                setTimeout(() => location.reload(), 1500);
                            }
                        })
                        .fail(function() {
                            completed++;
                            errors++;

                            if (completed === selectedStudents.length) {
                                hideLoading();
                                showError(`Có ${errors} lỗi xảy ra trong quá trình xử lý!`);
                                setTimeout(() => location.reload(), 1500);
                            }
                        });
                    });
                }
            );
        }

        function printStudents() {
            window.print();
        }

        // Auto-refresh every 3 minutes
        setInterval(function() {
            console.log('Checking for student updates...');
        }, 180000);
    </script>

    @Html.AntiForgeryToken()
}