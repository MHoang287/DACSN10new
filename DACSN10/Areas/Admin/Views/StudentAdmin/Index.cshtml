@model List<DACSN10.Areas.Admin.Models.UserAdminViewModel>
@{
    ViewData["Title"] = "Quản lý học viên";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid px-4 animate__animated animate__fadeIn">
    <h1 class="mt-4">Quản lý học viên</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/Admin">Trang chủ</a></li>
        <li class="breadcrumb-item active">Học viên</li>
    </ol>

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <div>
                <i class="fas fa-users me-1"></i>
                Danh sách học viên
            </div>
            <div>
                <a asp-action="Create" class="btn btn-success" data-intro="Nhấp vào đây để thêm học viên mới">
                    <i class="fas fa-plus-circle"></i> Thêm mới
                </a>
                <a asp-action="Search" class="btn btn-info text-white">
                    <i class="fas fa-search"></i> Tìm kiếm
                </a>
                <button type="button" id="showTutorial" class="btn btn-outline-primary">
                    <i class="fas fa-question-circle"></i> Hướng dẫn
                </button>
            </div>
        </div>
        <div class="card-body">
            <table id="datatablesStudents" class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Họ tên</th>
                        <th>Email</th>
                        <th>Số điện thoại</th>
                        <th>Ngày đăng ký</th>
                        <th>Khóa học</th>
                        <th>Trạng thái</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td>
                                <a asp-action="Details" asp-route-id="@item.Id" class="text-decoration-none">
                                    @item.HoTen
                                </a>
                            </td>
                            <td>@item.Email</td>
                            <td>@(string.IsNullOrEmpty(item.PhoneNumber) ? "Chưa cập nhật" : item.PhoneNumber)</td>
                            <td>@item.NgayDangKy.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>
                                <span class="badge rounded-pill bg-primary">@item.EnrollmentCount khóa học</span>
                            </td>
                            <td>
                                @if (item.TrangThai == "Active")
                                {
                                    <span class="badge bg-success">Hoạt động</span>
                                }
                                else if (item.TrangThai == "Locked")
                                {
                                    <span class="badge bg-danger">Đã khóa</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Không hoạt động</span>
                                }
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-primary btn-sm" data-bs-toggle="tooltip" title="Chỉnh sửa">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm text-white" data-bs-toggle="tooltip" title="Chi tiết">
                                        <i class="fas fa-info-circle"></i>
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm" data-bs-toggle="tooltip" title="Xóa">
                                        <i class="fas fa-trash-alt"></i>
                                    </a>
                                    <button type="button" class="btn btn-warning btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-cogs"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        @if (item.TrangThai == "Active")
                                        {
                                            <li>
                                                <button class="dropdown-item lock-account" data-id="@item.Id" data-name="@item.HoTen">
                                                    <i class="fas fa-lock me-2"></i> Khóa tài khoản
                                                </button>
                                            </li>
                                        }
                                        else if (item.TrangThai == "Locked")
                                        {
                                            <li>
                                                <button class="dropdown-item unlock-account" data-id="@item.Id" data-name="@item.HoTen">
                                                    <i class="fas fa-unlock me-2"></i> Mở khóa tài khoản
                                                </button>
                                            </li>
                                        }
                                        <li>
                                            <button class="dropdown-item promote-to-teacher" data-id="@item.Id" data-name="@item.HoTen">
                                                <i class="fas fa-user-graduate me-2"></i> Cấp quyền giảng viên
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Biểu đồ thống kê -->
    <div class="row">
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-bar me-1"></i>
                    Thống kê học viên theo trạng thái
                </div>
                <div class="card-body">
                    <canvas id="studentStatusChart" width="100%" height="40"></canvas>
                </div>
            </div>
        </div>
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-line me-1"></i>
                    Số lượng học viên đăng ký theo thời gian
                </div>
                <div class="card-body">
                    <canvas id="studentRegistrationChart" width="100%" height="40"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Syncfusion Dashboard -->
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-tachometer-alt me-1"></i>
            Bảng điều khiển nâng cao
        </div>
        <div class="card-body">
            <div id="dashboardContainer" style="height: 400px;"></div>
        </div>
    </div>

    <!-- Forms ẩn cho các thao tác -->
    <form id="formLockAccount" asp-action="LockAccount" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" name="id" id="lockAccountId" />
    </form>

    <form id="formUnlockAccount" asp-action="UnlockAccount" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" name="id" id="unlockAccountId" />
    </form>

    <form id="formPromoteToTeacher" asp-action="PromoteToTeacher" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" name="id" id="promoteToTeacherId" />
    </form>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // DataTables
            $('#datatablesStudents').DataTable({
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.10.25/i18n/Vietnamese.json'
                },
                responsive: true,
                order: [[4, 'desc']]
            });

            // Tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Hiển thị thông báo thành công/lỗi với Toastr
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
                    toastr.success('@TempData["SuccessMessage"]', 'Thành công');
            </text>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <text>
                    toastr.error('@TempData["ErrorMessage"]', 'Lỗi');
            </text>
        }

            // Xử lý sự kiện nút khóa tài khoản
            $('.lock-account').click(function() {
                var id = $(this).data('id');
                var name = $(this).data('name');

                Swal.fire({
                    title: 'Xác nhận khóa tài khoản',
                    text: `Bạn có chắc chắn muốn khóa tài khoản của học viên "${name}"?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Xác nhận',
                    cancelButtonText: 'Hủy bỏ'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $('#lockAccountId').val(id);
                        $('#formLockAccount').submit();
                    }
                });
            });

            // Xử lý sự kiện nút mở khóa tài khoản
            $('.unlock-account').click(function() {
                var id = $(this).data('id');
                var name = $(this).data('name');

                Swal.fire({
                    title: 'Xác nhận mở khóa tài khoản',
                    text: `Bạn có chắc chắn muốn mở khóa tài khoản của học viên "${name}"?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Xác nhận',
                    cancelButtonText: 'Hủy bỏ'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $('#unlockAccountId').val(id);
                        $('#formUnlockAccount').submit();
                    }
                });
            });

            // Xử lý sự kiện nút cấp quyền giảng viên
            $('.promote-to-teacher').click(function() {
                var id = $(this).data('id');
                var name = $(this).data('name');

                Swal.fire({
                    title: 'Xác nhận cấp quyền giảng viên',
                    text: `Bạn có chắc chắn muốn cấp quyền giảng viên cho học viên "${name}"?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Xác nhận',
                    cancelButtonText: 'Hủy bỏ'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $('#promoteToTeacherId').val(id);
                        $('#formPromoteToTeacher').submit();
                    }
                });
            });

            // Thống kê dữ liệu từ Model
            const students = @Html.Raw(Json.Serialize(Model));

            // Đếm trạng thái học viên
            const statusCounts = {
                'Hoạt động': 0,
                'Đã khóa': 0,
                'Không hoạt động': 0
            };

            students.forEach(student => {
                if (student.trangThai === 'Active') {
                    statusCounts['Hoạt động']++;
                } else if (student.trangThai === 'Locked') {
                    statusCounts['Đã khóa']++;
                } else {
                    statusCounts['Không hoạt động']++;
                }
            });

            // Biểu đồ trạng thái học viên
            var ctxStatus = document.getElementById("studentStatusChart");
            var studentStatusChart = new Chart(ctxStatus, {
                type: 'pie',
                data: {
                    labels: Object.keys(statusCounts),
                    datasets: [{
                        data: Object.values(statusCounts),
                        backgroundColor: ['#28a745', '#dc3545', '#6c757d'],
                        hoverBackgroundColor: ['#218838', '#c82333', '#5a6268'],
                        hoverBorderColor: "rgba(234, 236, 244, 1)",
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        caretPadding: 10,
                    },
                    legend: {
                        display: true,
                        position: 'bottom'
                    },
                    cutoutPercentage: 70,
                },
            });

            // Nhóm học viên theo tháng đăng ký
            const registrationData = {};
            const now = new Date();

            // Tạo dữ liệu cho 6 tháng gần nhất
            for (let i = 5; i >= 0; i--) {
                const month = new Date(now.getFullYear(), now.getMonth() - i, 1);
                const monthString = month.toLocaleDateString('vi-VN', { month: '2-digit', year: 'numeric' });
                registrationData[monthString] = 0;
            }

            // Đếm số lượng học viên đăng ký theo tháng
            students.forEach(student => {
                const regDate = new Date(student.ngayDangKy);
                const monthString = regDate.toLocaleDateString('vi-VN', { month: '2-digit', year: 'numeric' });

                if (registrationData[monthString] !== undefined) {
                    registrationData[monthString]++;
                }
            });

            // Biểu đồ đăng ký học viên theo thời gian
            var ctxReg = document.getElementById("studentRegistrationChart");
            var studentRegChart = new Chart(ctxReg, {
                type: 'line',
                data: {
                    labels: Object.keys(registrationData),
                    datasets: [{
                        label: "Học viên đăng ký",
                        lineTension: 0.3,
                        backgroundColor: "rgba(78, 115, 223, 0.05)",
                        borderColor: "rgba(78, 115, 223, 1)",
                        pointRadius: 3,
                        pointBackgroundColor: "rgba(78, 115, 223, 1)",
                        pointBorderColor: "rgba(78, 115, 223, 1)",
                        pointHoverRadius: 3,
                        pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
                        pointHoverBorderColor: "rgba(78, 115, 223, 1)",
                        pointHitRadius: 10,
                        pointBorderWidth: 2,
                        data: Object.values(registrationData),
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    layout: {
                        padding: {
                            left: 10,
                            right: 25,
                            top: 25,
                            bottom: 0
                        }
                    },
                    scales: {
                        xAxes: [{
                            time: {
                                unit: 'date'
                            },
                            gridLines: {
                                display: false,
                                drawBorder: false
                            },
                            ticks: {
                                maxTicksLimit: 7
                            }
                        }],
                        yAxes: [{
                            ticks: {
                                maxTicksLimit: 5,
                                padding: 10,
                                // Use callback to make sure we display whole numbers
                                callback: function(value) {
                                    if (Math.floor(value) === value) {
                                        return value;
                                    }
                                }
                            },
                            gridLines: {
                                color: "rgb(234, 236, 244)",
                                zeroLineColor: "rgb(234, 236, 244)",
                                drawBorder: false,
                                borderDash: [2],
                                zeroLineBorderDash: [2]
                            }
                        }],
                    },
                    legend: {
                        display: false
                    },
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        titleMarginBottom: 10,
                        titleFontColor: '#6e707e',
                        titleFontSize: 14,
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        intersect: false,
                        mode: 'index',
                        caretPadding: 10,
                    }
                }
            });

            // Syncfusion Dashboard
            $("#dashboardContainer").ejDashboardLayout({
                columns: 5,
                cellSpacing: [10, 10],
                allowDragging: true,
                dashboardCells: [
                    { id: "cell1", header: "Tổng số học viên", content: createSummaryCard(students.length, "fas fa-users", "bg-primary"), rowSpan: 1, colSpan: 1 },
                    { id: "cell2", header: "Học viên đang hoạt động", content: createSummaryCard(statusCounts['Hoạt động'], "fas fa-user-check", "bg-success"), rowSpan: 1, colSpan: 1 },
                    { id: "cell3", header: "Học viên bị khóa", content: createSummaryCard(statusCounts['Đã khóa'], "fas fa-user-lock", "bg-danger"), rowSpan: 1, colSpan: 1 },
                    { id: "cell4", header: "Khóa học đã đăng ký", content: createSummaryCard(students.reduce((total, student) => total + student.enrollmentCount, 0), "fas fa-book", "bg-info"), rowSpan: 1, colSpan: 1 },
                    { id: "cell5", header: "Người mới đăng ký trong tháng", content: createSummaryCard(registrationData[Object.keys(registrationData)[Object.keys(registrationData).length - 1]], "fas fa-user-plus", "bg-warning"), rowSpan: 1, colSpan: 1 },
                    { id: "cell6", header: "Phân bố học viên theo khóa học", content: "<div id='courseDistributionChart'></div>", rowSpan: 2, colSpan: 3 },
                    { id: "cell7", header: "Top học viên tích cực", content: createTopStudentsTable(), rowSpan: 2, colSpan: 2 }
                ]
            });

            function createSummaryCard(value, iconClass, colorClass) {
                return `<div class="card ${colorClass} text-white mb-0">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="display-4">${value}</div>
                            <i class="${iconClass} fa-3x opacity-50"></i>
                        </div>
                    </div>
                </div>`;
            }

            function createTopStudentsTable() {
                // Sắp xếp học viên theo số khóa học đã đăng ký
                const topStudents = [...students].sort((a, b) => b.enrollmentCount - a.enrollmentCount).slice(0, 5);
                let html = `<div class="table-responsive">
                    <table class="table table-bordered table-sm">
                        <thead>
                            <tr>
                                <th>Học viên</th>
                                <th>Email</th>
                                <th>Khóa học</th>
                                <th>Trạng thái</th>
                            </tr>
                        </thead>
                        <tbody>`;

                topStudents.forEach(student => {
                    let statusBadge = '';
                    if (student.trangThai === 'Active') {
                        statusBadge = '<span class="badge bg-success">Hoạt động</span>';
                    } else if (student.trangThai === 'Locked') {
                        statusBadge = '<span class="badge bg-danger">Đã khóa</span>';
                    } else {
                        statusBadge = '<span class="badge bg-secondary">Không hoạt động</span>';
                    }

                    html += `<tr>
                        <td>${student.hoTen}</td>
                        <td>${student.email}</td>
                        <td>${student.enrollmentCount}</td>
                        <td>${statusBadge}</td>
                    </tr>`;
                });

                html += `</tbody></table></div>`;
                return html;
            }

            // Tạo dữ liệu phân phối khóa học
            setTimeout(() => {
                const courseDistribution = [
                    { x: "0 khóa học", y: students.filter(s => s.enrollmentCount === 0).length },
                    { x: "1 khóa học", y: students.filter(s => s.enrollmentCount === 1).length },
                    { x: "2 khóa học", y: students.filter(s => s.enrollmentCount === 2).length },
                    { x: "3 khóa học", y: students.filter(s => s.enrollmentCount === 3).length },
                    { x: "4+ khóa học", y: students.filter(s => s.enrollmentCount >= 4).length }
                ];

                // Tạo biểu đồ phân bố khóa học với Syncfusion
                const chart = new ej.charts.Chart({
                    primaryXAxis: {
                        valueType: 'Category',
                        title: 'Số khóa học đã đăng ký'
                    },
                    primaryYAxis: {
                        title: 'Số học viên',
                        minimum: 0,
                        interval: 5
                    },
                    series: [
                        {
                            type: 'Column',
                            dataSource: courseDistribution,
                            xName: 'x',
                            yName: 'y',
                            name: 'Học viên',
                            fill: '#4e73df'
                        }
                    ],
                    title: 'Phân bố học viên theo số lượng khóa học đã đăng ký',
                    legend: {
                        visible: false
                    },
                    tooltip: {
                        enable: true
                    }
                });
                chart.appendTo('#courseDistributionChart');
            }, 100);

            // Hướng dẫn sử dụng với Intro.js
            $('#showTutorial').click(function() {
                introJs().setOptions({
                    steps: [
                        {
                            element: document.querySelector('.card-header'),
                            intro: 'Đây là trang quản lý học viên.'
                        },
                        {
                            element: document.querySelector('a[asp-action="Create"]'),
                            intro: 'Nhấn vào đây để thêm học viên mới.'
                        },
                        {
                            element: document.querySelector('#datatablesStudents'),
                            intro: 'Bảng này hiển thị tất cả học viên trong hệ thống.'
                        },
                        {
                            element: document.querySelector('.btn-warning'),
                            intro: 'Nhấn vào đây để xem thêm các tùy chọn như khóa/mở khóa tài khoản hoặc cấp quyền giảng viên.'
                        },
                        {
                            element: document.querySelector('#studentStatusChart').parentNode,
                            intro: 'Biểu đồ này thể hiện phân bố học viên theo trạng thái tài khoản.'
                        },
                        {
                            element: document.querySelector('#studentRegistrationChart').parentNode,
                            intro: 'Biểu đồ này thể hiện số lượng học viên đăng ký theo thời gian.'
                        }
                    ],
                    prevLabel: 'Trước',
                    nextLabel: 'Tiếp',
                    skipLabel: 'Bỏ qua',
                    doneLabel: 'Xong'
                }).start();
            });

            // Hiệu ứng Animate.css
            $('.card').addClass('animate__animated animate__fadeIn');
        });
    </script>
}