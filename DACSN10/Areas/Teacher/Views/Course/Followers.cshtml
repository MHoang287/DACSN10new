@model IEnumerable<DACSN10.Areas.Teacher.Models.CourseFollowViewModel>

@{
    ViewData["Title"] = "Course Followers";
    Layout = "~/Areas/Teacher/Views/Shared/_Layout.cshtml";
    var course = ViewBag.Course as DACSN10.Models.Course;
}

<div class="container-fluid px-4 animate__animated animate__fadeIn">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mt-4">
            <i class="fas fa-heart"></i> Followers for "@course.TenKhoaHoc"
        </h1>
        <div>
            <a asp-action="Index" class="btn btn-outline-secondary me-2">
                <i class="fas fa-arrow-left"></i> Back to Courses
            </a>
            <a asp-action="Students" asp-route-id="@course.CourseID" class="btn btn-primary">
                <i class="fas fa-users"></i> View Students
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-4">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-pie me-1"></i>
                    Follower Statistics
                </div>
                <div class="card-body">
                    <div class="mb-4">
                        <canvas id="followersChart"></canvas>
                    </div>
                    <dl class="row mt-3">
                        <dt class="col-sm-8">Total Followers:</dt>
                        <dd class="col-sm-4">@Model.Count()</dd>

                        <dt class="col-sm-8">New Followers (This Month):</dt>
                        <dd class="col-sm-4">
                            @Model.Count(f => f.FollowDate >= DateTime.Now.AddMonths(-1))
                        </dd>

                        <dt class="col-sm-8">Growth Rate (vs Last Month):</dt>
                        @{
                            var thisMonth = Model.Count(f => f.FollowDate >= DateTime.Now.AddMonths(-1));
                            var lastMonth = Model.Count(f => f.FollowDate >= DateTime.Now.AddMonths(-2) && f.FollowDate < DateTime.Now.AddMonths(-1));
                            var growthRate = lastMonth > 0 ? ((double)(thisMonth - lastMonth) / lastMonth) * 100 : 0;
                            var growthClass = growthRate >= 0 ? "text-success" : "text-danger";
                            var growthIcon = growthRate >= 0 ? "fa-arrow-up" : "fa-arrow-down";
                        }
                        <dd class="col-sm-4 @growthClass">
                            <i class="fas @growthIcon"></i> @Math.Abs(growthRate).ToString("F1")%
                        </dd>
                    </dl>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <i class="fas fa-lightbulb me-1"></i>
                    Tips to Increase Followers
                </div>
                <div class="card-body">
                    <ul class="fa-ul">
                        <li class="mb-2">
                            <span class="fa-li"><i class="fas fa-check-circle text-success"></i></span>
                            <strong>Share previews</strong> of your course content on social media
                        </li>
                        <li class="mb-2">
                            <span class="fa-li"><i class="fas fa-check-circle text-success"></i></span>
                            <strong>Update your course</strong> regularly to keep it relevant
                        </li>
                        <li class="mb-2">
                            <span class="fa-li"><i class="fas fa-check-circle text-success"></i></span>
                            <strong>Engage with comments</strong> and feedback from students
                        </li>
                        <li class="mb-2">
                            <span class="fa-li"><i class="fas fa-check-circle text-success"></i></span>
                            <strong>Create a promotion</strong> or limited-time discount
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-xl-8">
            <div class="card mb-4">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <i class="fas fa-table me-1"></i>
                            Follower List
                        </div>
                        <div>
                            <button id="exportFollowersBtn" class="btn btn-sm btn-success">
                                <i class="fas fa-file-export"></i> Export Data
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <table id="followersTable" class="table table-striped table-hover" width="100%">
                        <thead>
                            <tr>
                                <th>User Name</th>
                                <th>Email</th>
                                <th>Full Name</th>
                                <th>Follow Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.UserName</td>
                                    <td>@item.Email</td>
                                    <td>@item.HoTen</td>
                                    <td>@item.FollowDate.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-outline-primary send-offer-btn"
                                                    data-name="@item.HoTen" data-email="@item.Email" data-bs-toggle="tooltip" title="Send Special Offer">
                                                <i class="fas fa-tag"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-info notify-update-btn"
                                                    data-name="@item.HoTen" data-email="@item.Email" data-bs-toggle="tooltip" title="Notify of Update">
                                                <i class="fas fa-bell"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <i class="fas fa-bullhorn me-1"></i>
                    Bulk Actions
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <button id="bulkOfferBtn" class="btn btn-outline-primary w-100 mb-3">
                                <i class="fas fa-percentage"></i> Send Discount to All Followers
                            </button>
                        </div>
                        <div class="col-md-6">
                            <button id="bulkUpdateBtn" class="btn btn-outline-info w-100 mb-3">
                                <i class="fas fa-newspaper"></i> Announce Course Update
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Send Offer Modal -->
<div class="modal fade" id="sendOfferModal" tabindex="-1" aria-labelledby="sendOfferModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sendOfferModalLabel">Send Special Offer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="offerForm">
                    <div class="mb-3">
                        <label class="form-label">Recipient:</label>
                        <input type="text" class="form-control" id="offerRecipientName" readonly>
                        <input type="hidden" id="offerRecipientEmail">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Discount Type:</label>
                        <select class="form-select" id="discountType">
                            <option value="percentage">Percentage Discount</option>
                            <option value="fixed">Fixed Amount Discount</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Discount Value:</label>
                        <div class="input-group">
                            <span class="input-group-text discount-symbol">%</span>
                            <input type="number" class="form-control" id="discountValue" min="1" value="10">
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Expiration Date:</label>
                        <input type="date" class="form-control" id="expirationDate"
                               min="@DateTime.Now.ToString("yyyy-MM-dd")"
                               value="@DateTime.Now.AddDays(7).ToString("yyyy-MM-dd")">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Custom Message:</label>
                        <textarea class="form-control" id="offerMessage" rows="4">I'd like to offer you a special discount on my course. Hope you'll enjoy the learning experience!</textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmOfferBtn">Send Offer</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize DataTable
            $('#followersTable').DataTable({
                responsive: true,
                order: [[3, 'desc']],
                dom: 'Bfrtip',
                buttons: [
                    {
                        extend: 'excel',
                        text: '<i class="fas fa-file-excel"></i> Excel',
                        className: 'btn btn-sm btn-outline-success',
                        exportOptions: {
                            columns: [0, 1, 2, 3]
                        }
                    },
                    {
                        extend: 'csv',
                        text: '<i class="fas fa-file-csv"></i> CSV',
                        className: 'btn btn-sm btn-outline-primary',
                        exportOptions: {
                            columns: [0, 1, 2, 3]
                        }
                    }
                ]
            });

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });

            // Followers Chart (Followers trend over time)
            const followersData = {};

            // Group followers by month
        @foreach (var item in Model)
        {
            @:const monthYear = "@item.FollowDate.ToString("yyyy-MM")";
            @:followersData[monthYear] = (followersData[monthYear] || 0) + 1;
        }

            const labels = Object.keys(followersData).sort();
            const data = labels.map(month => followersData[month]);

            // Calculate cumulative data for line chart
            const cumulativeData = [];
            let runningTotal = 0;
            data.forEach(count => {
                runningTotal += count;
                cumulativeData.push(runningTotal);
            });

            const followersCtx = document.getElementById('followersChart').getContext('2d');

            new Chart(followersCtx, {
                type: 'line',
                data: {
                    labels: labels.map(month => {
                        const [year, monthNum] = month.split('-');
                        return `${monthNum}/${year.substring(2)}`;
                    }),
                    datasets: [
                        {
                            label: 'New Followers',
                            type: 'bar',
                            data: data,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1,
                            yAxisID: 'y-axis-1'
                        },
                        {
                            label: 'Total Followers',
                            type: 'line',
                            data: cumulativeData,
                            fill: false,
                            borderColor: 'rgba(255, 99, 132, 1)',
                            tension: 0.1,
                            yAxisID: 'y-axis-2'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        'y-axis-1': {
                            type: 'linear',
                            position: 'left',
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'New Followers'
                            },
                            ticks: {
                                precision: 0
                            }
                        },
                        'y-axis-2': {
                            type: 'linear',
                            position: 'right',
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Total Followers'
                            },
                            grid: {
                                drawOnChartArea: false
                            },
                            ticks: {
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Follower Growth Trend'
                        }
                    }
                }
            });

            // Toggle discount symbol
            $('#discountType').on('change', function() {
                const type = $(this).val();
                if (type === 'percentage') {
                    $('.discount-symbol').text('%');
                    $('#discountValue').attr({
                        'max': 100,
                        'value': 10
                    });
                } else {
                    $('.discount-symbol').text('₫');
                    $('#discountValue').attr({
                        'max': '',
                        'value': 50000
                    });
                }
            });

            // Send offer button
            $('.send-offer-btn').on('click', function() {
                const name = $(this).data('name');
                const email = $(this).data('email');

                $('#offerRecipientName').val(name);
                $('#offerRecipientEmail').val(email);

                const sendOfferModal = new bootstrap.Modal(document.getElementById('sendOfferModal'));
                sendOfferModal.show();
            });

            // Confirm offer button
            $('#confirmOfferBtn').on('click', function() {
                const name = $('#offerRecipientName').val();
                const discountType = $('#discountType').val();
                const discountValue = $('#discountValue').val();
                const discountText = discountType === 'percentage' ? `${discountValue}%` : `${parseInt(discountValue).toLocaleString('vi-VN')}₫`;

                Swal.fire({
                    title: 'Confirm Offer',
                    text: `Send a ${discountText} discount offer to ${name}?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, send it!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // In a real implementation, you'd send the offer via AJAX

                        // Close the modal
                        const sendOfferModal = bootstrap.Modal.getInstance(document.getElementById('sendOfferModal'));
                        sendOfferModal.hide();

                        // Show success message
                        toastr.success(`Special offer sent to ${name} successfully!`);
                    }
                });
            });

            // Notify of update button
            $('.notify-update-btn').on('click', function() {
                const name = $(this).data('name');

                Swal.fire({
                    title: 'Send Update Notification',
                    html: `
                        <form>
                            <div class="mb-3 text-start">
                                <label class="form-label">Update Title:</label>
                                <input class="form-control" id="updateTitle" value="Course Update Announcement">
                            </div>
                            <div class="mb-3 text-start">
                                <label class="form-label">Message:</label>
                                <textarea class="form-control" id="updateMessage" rows="5">I've just updated the course with new content. Check it out!</textarea>
                            </div>
                        </form>
                    `,
                    showCancelButton: true,
                    confirmButtonText: 'Send Notification',
                    cancelButtonText: 'Cancel',
                    preConfirm: () => {
                        const title = document.getElementById('updateTitle').value;
                        const message = document.getElementById('updateMessage').value;

                        if (!title || !message) {
                            Swal.showValidationMessage('Please fill in all fields');
                            return false;
                        }

                        return {
                            title: title,
                            message: message
                        };
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        // In a real implementation, you'd send the notification via AJAX

                        // Show success message
                        toastr.success(`Update notification sent to ${name} successfully!`);
                    }
                });
            });

            // Bulk offer button
            $('#bulkOfferBtn').on('click', function() {
                const followerCount = @Model.Count();

                Swal.fire({
                    title: 'Send Bulk Discount',
                    html: `
                        <p>You're about to send a discount offer to <strong>${followerCount} followers</strong>.</p>
                        <form class="text-start">
                            <div class="mb-3">
                                <label class="form-label">Discount Type:</label>
                                <select class="form-select" id="bulkDiscountType">
                                    <option value="percentage">Percentage Discount</option>
                                    <option value="fixed">Fixed Amount Discount</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Discount Value:</label>
                                <div class="input-group">
                                    <span class="input-group-text bulk-discount-symbol">%</span>
                                    <input type="number" class="form-control" id="bulkDiscountValue" min="1" max="100" value="15">
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Expiration Date:</label>
                                <input type="date" class="form-control" id="bulkExpirationDate"
                                       min="${new Date().toISOString().split('T')[0]}"
                                       value="${new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Message:</label>
                                <textarea class="form-control" id="bulkOfferMessage" rows="3">Thank you for following my course! Here's a special discount just for you.</textarea>
                            </div>
                        </form>
                    `,
                    width: '32rem',
                    showCancelButton: true,
                    confirmButtonText: 'Send to All',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // In a real implementation, you'd send the bulk offer via AJAX

                        // Show success message with loading indicator
                        let timerInterval;
                        Swal.fire({
                            title: 'Sending offers...',
                            html: 'Processing <b></b> followers',
                            timer: 2000,
                            timerProgressBar: true,
                            didOpen: () => {
                                Swal.showLoading();
                                const b = Swal.getHtmlContainer().querySelector('b');
                                timerInterval = setInterval(() => {
                                    b.textContent = Math.floor(Math.random() * followerCount) + '/' + followerCount;
                                }, 100);
                            },
                            willClose: () => {
                                clearInterval(timerInterval);
                            }
                        }).then((result) => {
                            if (result.dismiss === Swal.DismissReason.timer) {
                                toastr.success(`Discount offers sent to all ${followerCount} followers successfully!`);
                            }
                        });
                    }
                });

                // Toggle bulk discount symbol
                $(document).on('change', '#bulkDiscountType', function() {
                    const type = $(this).val();
                    if (type === 'percentage') {
                        $('.bulk-discount-symbol').text('%');
                        $('#bulkDiscountValue').attr({
                            'max': 100,
                            'value': 15
                        });
                    } else {
                        $('.bulk-discount-symbol').text('₫');
                        $('#bulkDiscountValue').attr({
                            'max': '',
                            'value': 75000
                        });
                    }
                });
            });

            // Bulk update button
            $('#bulkUpdateBtn').on('click', function() {
                const followerCount = @Model.Count();

                Swal.fire({
                    title: 'Announce Course Update',
                    html: `
                        <p>You're about to send an update announcement to <strong>${followerCount} followers</strong>.</p>
                        <form class="text-start">
                            <div class="mb-3">
                                <label class="form-label">Update Title:</label>
                                <input class="form-control" id="bulkUpdateTitle" value="Major Course Update - New Content Available!">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">What's New:</label>
                                <select class="form-select" id="updateType" multiple>
                                    <option value="lessons" selected>New Lessons</option>
                                    <option value="materials">Updated Materials</option>
                                    <option value="quizzes">New Quizzes</option>
                                    <option value="projects">New Projects</option>
                                </select>
                                <div class="form-text">Hold Ctrl/Cmd to select multiple options</div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Details:</label>
                                <textarea class="form-control" id="bulkUpdateDetails" rows="4">I've just added new content to the course including updated materials and examples. Check it out!</textarea>
                            </div>
                        </form>
                    `,
                    width: '32rem',
                    showCancelButton: true,
                    confirmButtonText: 'Send Announcement',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // In a real implementation, you'd send the announcement via AJAX

                        // Show success message with loading indicator
                        let timerInterval;
                        Swal.fire({
                            title: 'Sending announcements...',
                            html: 'Processing <b></b> followers',
                            timer: 2000,
                            timerProgressBar: true,
                            didOpen: () => {
                                Swal.showLoading();
                                const b = Swal.getHtmlContainer().querySelector('b');
                                timerInterval = setInterval(() => {
                                    b.textContent = Math.floor(Math.random() * followerCount) + '/' + followerCount;
                                }, 100);
                            },
                            willClose: () => {
                                clearInterval(timerInterval);
                            }
                        }).then((result) => {
                            if (result.dismiss === Swal.DismissReason.timer) {
                                toastr.success(`Update announcement sent to all ${followerCount} followers successfully!`);
                            }
                        });
                    }
                });
            });

            // Export data button
            $('#exportFollowersBtn').on('click', function() {
                $('#followersTable').DataTable().button('.buttons-excel').trigger();
            });
        });
    </script>
}