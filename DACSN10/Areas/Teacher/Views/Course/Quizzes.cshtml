@model DACSN10.Models.Course

@{
    ViewData["Title"] = "Course Quizzes";
    Layout = "~/Areas/Teacher/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid px-4 animate__animated animate__fadeIn">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mt-4">
            <i class="fas fa-question-circle"></i> Quizzes for "@Model.TenKhoaHoc"
        </h1>
        <div>
            <a asp-action="Index" class="btn btn-outline-secondary me-2">
                <i class="fas fa-arrow-left"></i> Back to Courses
            </a>
            <a asp-action="CreateQuiz" asp-route-id="@Model.CourseID" class="btn btn-primary">
                <i class="fas fa-plus-circle"></i> Add New Quiz
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-3">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-book me-1"></i>
                    Course Information
                </div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-5">Status:</dt>
                        <dd class="col-sm-7">
                            @if (Model.TrangThai == "Published")
                            {
                                <span class="badge bg-success">Published</span>
                            }
                            else if (Model.TrangThai == "Draft")
                            {
                                <span class="badge bg-warning text-dark">Draft</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">@Model.TrangThai</span>
                            }
                        </dd>

                        <dt class="col-sm-5">Lessons:</dt>
                        <dd class="col-sm-7">@(Model.Lessons?.Count() ?? 0)</dd>

                        <dt class="col-sm-5">Quizzes:</dt>
                        <dd class="col-sm-7">@(Model.Quizzes?.Count() ?? 0)</dd>
                    </dl>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-cog me-1"></i>
                    Quick Actions
                </div>
                <div class="card-body">
                    <div class="list-group">
                        <a asp-action="Lessons" asp-route-id="@Model.CourseID" class="list-group-item list-group-item-action">
                            <i class="fas fa-list-ul me-2"></i> Manage Lessons
                        </a>
                        <a asp-action="Students" asp-route-id="@Model.CourseID" class="list-group-item list-group-item-action">
                            <i class="fas fa-users me-2"></i> View Students
                        </a>
                        <a asp-action="Edit" asp-route-id="@Model.CourseID" class="list-group-item list-group-item-action">
                            <i class="fas fa-edit me-2"></i> Edit Course
                        </a>
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-lightbulb me-1"></i>
                    Quiz Tips
                </div>
                <div class="card-body">
                    <ul class="fa-ul mb-0">
                        <li class="mb-2">
                            <span class="fa-li"><i class="fas fa-check-circle text-success"></i></span>
                            Keep questions clear and concise
                        </li>
                        <li class="mb-2">
                            <span class="fa-li"><i class="fas fa-check-circle text-success"></i></span>
                            Include questions of varying difficulty
                        </li>
                        <li class="mb-2">
                            <span class="fa-li"><i class="fas fa-check-circle text-success"></i></span>
                            Place quizzes after key lesson content
                        </li>
                        <li class="mb-2">
                            <span class="fa-li"><i class="fas fa-check-circle text-success"></i></span>
                            Provide explanations for answers
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-xl-9">
            @if (Model.Quizzes == null || !Model.Quizzes.Any())
            {
                <div class="card mb-4">
                    <div class="card-body py-5">
                        <div class="text-center">
                            <div class="mb-4">
                                <i class="fas fa-question-circle fa-5x text-muted"></i>
                            </div>
                            <h4>No Quizzes Yet</h4>
                            <p class="text-muted">
                                Create quizzes to help students test their knowledge and reinforce learning.
                            </p>
                            <a asp-action="CreateQuiz" asp-route-id="@Model.CourseID" class="btn btn-primary mt-3">
                                <i class="fas fa-plus-circle"></i> Create Your First Quiz
                            </a>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <i class="fas fa-list me-1"></i>
                                Available Quizzes
                            </div>
                            <div>
                                <input type="text" class="form-control form-control-sm" id="quizSearch" placeholder="Search quizzes...">
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row" id="quizzesContainer">
                            @foreach (var quiz in Model.Quizzes)
                            {
                                <div class="col-lg-6 mb-4 quiz-item">
                                    <div class="card h-100 border-left-primary">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <div>
                                                <h5 class="mb-0 quiz-title">@quiz.Title</h5>
                                            </div>
                                            <div>
                                                <span class="badge bg-info">@quiz.Questions.Count questions</span>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="mb-3 quiz-stats">
                                                <div class="row">
                                                    <div class="col-6">
                                                        <div class="small text-muted">Average Score</div>
                                                        <div class="h5">
                                                            @{
                                                                // Simulate a random average score
                                                                var rnd = new Random();
                                                                var avgScore = rnd.Next(65, 95);
                                                            }
                                                            @avgScore%
                                                        </div>
                                                    </div>
                                                    <div class="col-6">
                                                        <div class="small text-muted">Completion Rate</div>
                                                        <div class="h5">
                                                            @{
                                                                var completionRate = rnd.Next(50, 100);
                                                            }
                                                            @completionRate%
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="d-flex justify-content-between">
                                                <div>
                                                    <button type="button" class="btn btn-sm btn-outline-primary preview-quiz-btn"
                                                            data-quiz-id="@quiz.QuizID" data-quiz-title="@quiz.Title">
                                                        <i class="fas fa-eye"></i> Preview
                                                    </button>
                                                </div>
                                                <div class="btn-group" role="group">
                                                    <button type="button" class="btn btn-sm btn-outline-secondary edit-quiz-btn"
                                                            data-quiz-id="@quiz.QuizID" data-bs-toggle="tooltip" title="Edit Quiz">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-outline-success export-quiz-btn"
                                                            data-quiz-id="@quiz.QuizID" data-bs-toggle="tooltip" title="Export Quiz">
                                                        <i class="fas fa-file-export"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-outline-danger delete-quiz-btn"
                                                            data-quiz-id="@quiz.QuizID" data-quiz-title="@quiz.Title"
                                                            data-bs-toggle="tooltip" title="Delete Quiz">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <i class="fas fa-chart-bar me-1"></i>
                        Quiz Performance Analytics
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <canvas id="quizScoresChart"></canvas>
                            </div>
                            <div class="col-md-6">
                                <canvas id="completionRateChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Quiz Preview Modal -->
<div class="modal fade" id="quizPreviewModal" tabindex="-1" aria-labelledby="quizPreviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="quizPreviewModalLabel">Quiz Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="quizPreviewContent">
                    <!-- Quiz preview content will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="editQuizBtn">
                    <i class="fas fa-edit"></i> Edit Quiz
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });

            // Quiz search functionality
            $('#quizSearch').on('keyup', function() {
                const searchTerm = $(this).val().toLowerCase();

                $('.quiz-item').each(function() {
                    const quizTitle = $(this).find('.quiz-title').text().toLowerCase();

                    if (quizTitle.indexOf(searchTerm) > -1) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            });

            // Preview quiz button
            $('.preview-quiz-btn').on('click', function() {
                const quizId = $(this).data('quiz-id');
                const quizTitle = $(this).data('quiz-title');

                // In a real implementation, you'd load the quiz questions via AJAX
                // For now, we'll generate mock questions

                // Set modal title
                $('#quizPreviewModalLabel').text(`Preview: ${quizTitle}`);

                // Generate mock quiz content
                let quizContent = `
                    <div class="quiz-preview">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            This is a preview mode. Student responses are not tracked in this view.
                        </div>

                        <form id="quizPreviewForm">
                `;

                // Generate 5 sample questions
                for (let i = 1; i <= 5; i++) {
                    quizContent += `
                        <div class="card mb-3 question-card">
                            <div class="card-header bg-light">
                                Question ${i}
                            </div>
                            <div class="card-body">
                                <p class="mb-3"><strong>Sample question text ${i}?</strong></p>

                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="radio" name="q${i}" id="q${i}a" value="A">
                                    <label class="form-check-label" for="q${i}a">
                                        Option A
                                    </label>
                                </div>

                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="radio" name="q${i}" id="q${i}b" value="B">
                                    <label class="form-check-label" for="q${i}b">
                                        Option B
                                    </label>
                                </div>

                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="radio" name="q${i}" id="q${i}c" value="C">
                                    <label class="form-check-label" for="q${i}c">
                                        Option C
                                    </label>
                                </div>

                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="radio" name="q${i}" id="q${i}d" value="D">
                                    <label class="form-check-label" for="q${i}d">
                                        Option D
                                    </label>
                                </div>
                            </div>
                        </div>
                    `;
                }

                quizContent += `
                        <div class="d-grid gap-2">
                            <button type="button" class="btn btn-success" id="checkAnswersBtn">
                                <i class="fas fa-check"></i> Check Answers
                            </button>
                        </div>
                    </form>
                    </div>
                `;

                // Populate modal with quiz content
                $('#quizPreviewContent').html(quizContent);

                // Store quiz ID for edit button
                $('#editQuizBtn').data('quiz-id', quizId);

                // Show the modal
                const quizPreviewModal = new bootstrap.Modal(document.getElementById('quizPreviewModal'));
                quizPreviewModal.show();

                // Handle check answers button
                $('#checkAnswersBtn').on('click', function() {
                    // Simulate checking answers
                    // In a real implementation, you'd compare against actual correct answers

                    // Generate random correct answers
                    const correctAnswers = {
                        q1: 'A',
                        q2: 'C',
                        q3: 'B',
                        q4: 'D',
                        q5: 'A'
                    };

                    let score = 0;
                    let totalQuestions = 5;

                    // Check each question
                    for (let i = 1; i <= totalQuestions; i++) {
                        const questionName = `q${i}`;
                        const selectedAnswer = $(`input[name=${questionName}]:checked`).val();
                        const correctAnswer = correctAnswers[questionName];

                        const questionCard = $(`.question-card:nth-child(${i})`);

                        if (selectedAnswer === correctAnswer) {
                            questionCard.find('.card-header').removeClass('bg-light').addClass('bg-success text-white');
                            score++;
                        } else {
                            questionCard.find('.card-header').removeClass('bg-light').addClass('bg-danger text-white');

                            // Highlight correct answer
                            questionCard.find(`#${questionName}${correctAnswer.toLowerCase()}`).closest('.form-check')
                                .addClass('text-success fw-bold');

                            // If answer was selected, indicate it was wrong
                            if (selectedAnswer) {
                                questionCard.find(`#${questionName}${selectedAnswer.toLowerCase()}`).closest('.form-check')
                                    .addClass('text-danger text-decoration-line-through');
                            }
                        }
                    }

                    // Display score
                    const scorePercentage = Math.round((score / totalQuestions) * 100);

                    $('.quiz-preview form').prepend(`
                        <div class="alert ${scorePercentage >= 70 ? 'alert-success' : 'alert-warning'} mb-4">
                            <h4 class="alert-heading">Quiz Score: ${score}/${totalQuestions} (${scorePercentage}%)</h4>
                            <p class="mb-0">${scorePercentage >= 70 ? 'Great job!' : 'Keep studying!'}</p>
                        </div>
                    `);

                    // Disable form
                    $('#quizPreviewForm input').prop('disabled', true);
                    $(this).prop('disabled', true);
                });
            });

            // Edit quiz button (from modal)
            $('#editQuizBtn').on('click', function() {
                const quizId = $(this).data('quiz-id');

                // Close the modal
                const quizPreviewModal = bootstrap.Modal.getInstance(document.getElementById('quizPreviewModal'));
                quizPreviewModal.hide();

                // Redirect to edit quiz page (you'll need to create this route and view)
                // window.location.href = `/Teacher/Course/EditQuiz/${quizId}`;

                // For now just show an info toast
                toastr.info('Quiz editing feature coming soon!');
            });

            // Edit quiz button (from list)
            $('.edit-quiz-btn').on('click', function() {
                const quizId = $(this).data('quiz-id');

                // Redirect to edit quiz page (you'll need to create this route and view)
                // window.location.href = `/Teacher/Course/EditQuiz/${quizId}`;

                // For now just show an info toast
                toastr.info('Quiz editing feature coming soon!');
            });

            // Export quiz button
            $('.export-quiz-btn').on('click', function() {
                const quizId = $(this).data('quiz-id');

                Swal.fire({
                    title: 'Export Quiz',
                    html: `
                        <div class="text-start">
                            <p>Select export format:</p>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="exportFormat" id="formatPDF" value="pdf" checked>
                                <label class="form-check-label" for="formatPDF">
                                    <i class="fas fa-file-pdf text-danger"></i> PDF
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="exportFormat" id="formatWord" value="word">
                                <label class="form-check-label" for="formatWord">
                                    <i class="fas fa-file-word text-primary"></i> Word
                                </label>
                            </div>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="radio" name="exportFormat" id="formatExcel" value="excel">
                                <label class="form-check-label" for="formatExcel">
                                    <i class="fas fa-file-excel text-success"></i> Excel
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="includeAnswers" checked>
                                <label class="form-check-label" for="includeAnswers">
                                    Include answers
                                </label>
                            </div>
                        </div>
                    `,
                    showCancelButton: true,
                    confirmButtonText: 'Export',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // In a real implementation, you'd generate the export file via AJAX

                        // For now, just show a success message
                        toastr.success('Quiz exported successfully!');
                    }
                });
            });

            // Delete quiz button
            $('.delete-quiz-btn').on('click', function() {
                const quizId = $(this).data('quiz-id');
                const quizTitle = $(this).data('quiz-title');

                Swal.fire({
                    title: 'Delete Quiz',
                    text: `Are you sure you want to delete the quiz "${quizTitle}"?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, delete it!',
                    confirmButtonColor: '#d33',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // In a real implementation, you'd delete the quiz via AJAX

                        // For now, just show a success message
                        toastr.success(`Quiz "${quizTitle}" deleted successfully!`);
                    }
                });
            });

            // If there are quizzes, initialize charts
        @if (Model.Quizzes != null && Model.Quizzes.Any())
        {
            @:// Quiz scores chart (mock data)
            @:const quizScoresCtx = document.getElementById('quizScoresChart').getContext('2d');

            @:const quizLabels = [@Html.Raw(string.Join(",", Model.Quizzes.Select(q => $"'{q.Title}'")))];
            @:const quizScores = [@Html.Raw(string.Join(",", Model.Quizzes.Select(q => $"{new Random().Next(65, 95)}")))];

            @:new Chart(quizScoresCtx, {
            @:    type: 'bar',
            @:    data: {
            @:        labels: quizLabels,
            @:        datasets: [{
            @:            label: 'Average Score (%)',
            @:            data: quizScores,
            @:            backgroundColor: 'rgba(75, 192, 192, 0.6)',
            @:            borderColor: 'rgba(75, 192, 192, 1)',
            @:            borderWidth: 1
            @:        }]
            @:    },
            @:    options: {
            @:        responsive: true,
            @:        scales: {
            @:            y: {
            @:                beginAtZero: true,
            @:                max: 100
            @:            }
            @:        },
            @:        plugins: {
            @:            title: {
            @:                display: true,
            @:                text: 'Average Quiz Scores'
            @:            }
            @:        }
            @:    }
            @:});

            @:// Completion rate chart (mock data)
            @:const completionRateCtx = document.getElementById('completionRateChart').getContext('2d');

            @:const completionRates = [@Html.Raw(string.Join(",", Model.Quizzes.Select(q => $"{new Random().Next(50, 100)}")))];

            @:new Chart(completionRateCtx, {
            @:    type: 'bar',
            @:    data: {
            @:        labels: quizLabels,
            @:        datasets: [{
            @:            label: 'Completion Rate (%)',
            @:            data: completionRates,
            @:            backgroundColor: 'rgba(54, 162, 235, 0.6)',
            @:            borderColor: 'rgba(54, 162, 235, 1)',
            @:            borderWidth: 1
            @:        }]
            @:    },
            @:    options: {
            @:        responsive: true,
            @:        scales: {
            @:            y: {
            @:                beginAtZero: true,
            @:                max: 100
            @:            }
            @:        },
            @:        plugins: {
            @:            title: {
            @:                display: true,
            @:                text: 'Quiz Completion Rates'
            @:            }
            @:        }
            @:    }
            @:});
        }

            // Initialize intro.js
            const startTour = () => {
                introJs().setOptions({
                    steps: [
                        {
                            element: document.querySelector('h1'),
                            intro: "This is the quiz management page for your course."
                        },
                        {
                            element: document.querySelector('.btn-primary'),
                            intro: "Click here to create a new quiz for your course."
                        },
        @if (Model.Quizzes != null && Model.Quizzes.Any())
        {
            @:{
            @:    element: document.querySelector('#quizzesContainer'),
            @:    intro: "Here you can see all your quizzes and their performance metrics."
            @:}
        }
                    ]
                }).start();
            };

            // Add a tour button
            $('<button class="btn btn-sm btn-info position-fixed" style="bottom: 20px; right: 20px;"><i class="fas fa-question-circle"></i> Help</button>')
                .appendTo('body')
                .on('click', startTour);
        });
    </script>
}