@model IEnumerable<DACSN10.Areas.Teacher.Models.EnrollmentViewModel>

@{
    ViewData["Title"] = "Course Students";
    Layout = "~/Areas/Teacher/Views/Shared/_Layout.cshtml";
    var course = ViewBag.Course as DACSN10.Models.Course;
}

<div class="container-fluid px-4 animate__animated animate__fadeIn">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mt-4">
            <i class="fas fa-users"></i> Students for "@course.TenKhoaHoc"
        </h1>
        <div>
            <a asp-action="Index" class="btn btn-outline-secondary me-2">
                <i class="fas fa-arrow-left"></i> Back to Courses
            </a>
            <a asp-action="Edit" asp-route-id="@course.CourseID" class="btn btn-primary">
                <i class="fas fa-edit"></i> Edit Course
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-4">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-pie me-1"></i>
                    Enrollment Statistics
                </div>
                <div class="card-body">
                    <div class="mb-4">
                        <canvas id="progressChart"></canvas>
                    </div>
                    <dl class="row mt-3">
                        <dt class="col-sm-7">Total Students:</dt>
                        <dd class="col-sm-5">@Model.Count()</dd>
                        
                        <dt class="col-sm-7">Active Enrollments:</dt>
                        <dd class="col-sm-5">@Model.Count(e => e.TrangThai == "Active")</dd>
                        
                        <dt class="col-sm-7">Average Progress:</dt>
                        <dd class="col-sm-5">
                            @{
                                var avgProgress = Model.Any() ? Model.Average(e => e.Progress) : 0;
                                @($"{avgProgress:F1}%")
                            }
                        </dd>
                        
                        <dt class="col-sm-7">Completed:</dt>
                        <dd class="col-sm-5">@Model.Count(e => e.Progress == 100)/@Model.Count()</dd>
                    </dl>
                </div>
            </div>
            
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-bar me-1"></i>
                    Enrollment Trends
                </div>
                <div class="card-body">
                    <canvas id="enrollmentsChart"></canvas>
                </div>
            </div>
        </div>
        
        <div class="col-xl-8">
            <div class="card mb-4">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <i class="fas fa-table me-1"></i>
                            Student List
                        </div>
                        <div>
                            <button id="exportStudentsBtn" class="btn btn-sm btn-success">
                                <i class="fas fa-file-export"></i> Export Data
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <table id="studentsTable" class="table table-striped table-hover" width="100%">
                        <thead>
                            <tr>
                                <th>Student Name</th>
                                <th>Email</th>
                                <th>Enrollment Date</th>
                                <th>Status</th>
                                <th>Progress</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.HoTen</td>
                                    <td>@item.Email</td>
                                    <td>@item.EnrollDate.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        @if (item.TrangThai == "Active")
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else if (item.TrangThai == "Suspended")
                                        {
                                            <span class="badge bg-warning text-dark">Suspended</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">@item.TrangThai</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="progress" style="height: 20px;">
                                            @{
                                                var progressClass = "bg-info";
                                                if (item.Progress >= 100) progressClass = "bg-success";
                                                else if (item.Progress >= 75) progressClass = "bg-primary";
                                                else if (item.Progress >= 50) progressClass = "bg-info";
                                                else if (item.Progress >= 25) progressClass = "bg-warning";
                                                else progressClass = "bg-danger";
                                            }
                                            <div class="progress-bar @progressClass" role="progressbar" style="width: @item.Progress%;" 
                                                 aria-valuenow="@item.Progress" aria-valuemin="0" aria-valuemax="100">@item.Progress%</div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-outline-primary view-student-btn" 
                                                    data-id="@item.EnrollmentID" data-bs-toggle="tooltip" title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-warning toggle-status-btn" 
                                                    data-id="@item.EnrollmentID" data-status="@item.TrangThai" data-bs-toggle="tooltip" 
                                                    title="@(item.TrangThai == "Active" ? "Suspend" : "Activate")">
                                                <i class="fas @(item.TrangThai == "Active" ? "fa-ban" : "fa-check-circle")"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger remove-student-btn" 
                                                    data-id="@item.EnrollmentID" data-name="@item.HoTen" data-bs-toggle="tooltip" title="Remove Student">
                                                <i class="fas fa-user-minus"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Student Details Modal -->
<div class="modal fade" id="studentDetailsModal" tabindex="-1" aria-labelledby="studentDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="studentDetailsModalLabel">Student Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-header">Personal Information</div>
                                <div class="card-body">
                                    <dl class="row mb-0">
                                        <dt class="col-sm-4">Name:</dt>
                                        <dd class="col-sm-8" id="studentName"></dd>
                                        
                                        <dt class="col-sm-4">Email:</dt>
                                        <dd class="col-sm-8" id="studentEmail"></dd>
                                        
                                        <dt class="col-sm-4">Username:</dt>
                                        <dd class="col-sm-8" id="studentUsername"></dd>
                                    </dl>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-header">Enrollment Information</div>
                                <div class="card-body">
                                    <dl class="row mb-0">
                                        <dt class="col-sm-5">Enrolled On:</dt>
                                        <dd class="col-sm-7" id="enrollDate"></dd>
                                        
                                        <dt class="col-sm-5">Status:</dt>
                                        <dd class="col-sm-7" id="enrollStatus"></dd>
                                        
                                        <dt class="col-sm-5">Progress:</dt>
                                        <dd class="col-sm-7" id="enrollProgress"></dd>
                                    </dl>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">Lesson Progress</div>
                                <div class="card-body">
                                    <table class="table table-sm" id="lessonProgressTable">
                                        <thead>
                                            <tr>
                                                <th>Lesson Name</th>
                                                <th>Status</th>
                                                <th>Last Access</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Lesson progress data will be inserted here -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary" id="sendMessageBtn">
                    <i class="fas fa-envelope"></i> Send Message
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.5.2/bootbox.min.js"></script>

    <script>
        $(document).ready(function() {
            // Initialize DataTable
            $('#studentsTable').DataTable({
                responsive: true,
                order: [[2, 'desc']],
                dom: 'Bfrtip',
                buttons: [
                    {
                        extend: 'excel',
                        text: '<i class="fas fa-file-excel"></i> Excel',
                        className: 'btn btn-sm btn-outline-success',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4]
                        }
                    },
                    {
                        extend: 'pdf',
                        text: '<i class="fas fa-file-pdf"></i> PDF',
                        className: 'btn btn-sm btn-outline-danger',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4]
                        }
                    }
                ]
            });

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
            
            // Progress Chart
            const progressCtx = document.getElementById('progressChart').getContext('2d');
            
            // Count students by progress ranges
            const progressCounts = {
                completed: 0,  // 100%
                almostDone: 0, // 75-99%
                halfway: 0,    // 50-74%
                started: 0,    // 1-49%
                notStarted: 0  // 0%
            };
            
            @foreach (var item in Model) {
                @:if (@item.Progress === 100) progressCounts.completed++;
                @:else if (@item.Progress >= 75) progressCounts.almostDone++;
                @:else if (@item.Progress >= 50) progressCounts.halfway++;
                @:else if (@item.Progress > 0) progressCounts.started++;
                @:else progressCounts.notStarted++;
            }
            
            new Chart(progressCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Completed', 'Almost Done (75-99%)', 'Halfway (50-74%)', 'Started (1-49%)', 'Not Started'],
                    datasets: [{
                        data: [
                            progressCounts.completed,
                            progressCounts.almostDone,
                            progressCounts.halfway,
                            progressCounts.started,
                            progressCounts.notStarted
                        ],
                        backgroundColor: ['#28a745', '#007bff', '#17a2b8', '#ffc107', '#dc3545']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                boxWidth: 12,
                                padding: 10
                            }
                        },
                        title: {
                            display: true,
                            text: 'Student Progress Distribution'
                        }
                    }
                }
            });
            
            // Enrollments Chart (Enrollment trend over time)
            const enrollmentData = {};
            
            // Group enrollments by month
            @foreach (var item in Model) {
                @:var monthYear = "@item.EnrollDate.ToString("yyyy-MM")";
                @:enrollmentData[monthYear] = (enrollmentData[monthYear] || 0) + 1;
            }
            
            const enrollmentsCtx = document.getElementById('enrollmentsChart').getContext('2d');
            
            const labels = Object.keys(enrollmentData).sort();
            const data = labels.map(month => enrollmentData[month]);
            
            new Chart(enrollmentsCtx, {
                type: 'bar',
                data: {
                    labels: labels.map(month => {
                        const [year, monthNum] = month.split('-');
                        return `${monthNum}/${year.substring(2)}`;
                    }),
                    datasets: [{
                        label: 'New Enrollments',
                        data: data,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: 'Monthly Enrollments'
                        }
                    }
                }
            });
            
            // View student details
            $('.view-student-btn').on('click', function() {
                const enrollmentId = $(this).data('id');
                
                // In a real implementation, you'd fetch student details via AJAX
                // For now, we'll use the data from the table row
                const row = $(this).closest('tr');
                const studentName = row.find('td:eq(0)').text();
                const studentEmail = row.find('td:eq(1)').text();
                const enrollDate = row.find('td:eq(2)').text();
                const status = row.find('td:eq(3)').text().trim();
                const progress = row.find('.progress-bar').attr('aria-valuenow') + '%';
                
                // Populate modal
                $('#studentName').text(studentName);
                $('#studentEmail').text(studentEmail);
                $('#studentUsername').text(studentEmail); // Fixed: Proper way to simulate username
                $('#enrollDate').text(enrollDate);
                $('#enrollStatus').html(row.find('td:eq(3)').html());
                $('#enrollProgress').html(
                    `<div class="progress" style="height: 20px;">
                        ${row.find('.progress').html()}
                    </div>`
                );
                
                // Simulate lesson progress data
                const sampleLessons = [
                    { name: 'Introduction to the Course', status: 'Completed', date: '10/04/2025' },
                    { name: 'Core Concepts Overview', status: 'Completed', date: '15/04/2025' },
                    { name: 'Advanced Techniques', status: 'In Progress', date: '01/05/2025' },
                    { name: 'Final Project Guidelines', status: 'Not Started', date: '-' }
                ];
                
                $('#lessonProgressTable tbody').empty();
                sampleLessons.forEach(lesson => {
                    let statusBadge = '';
                    if (lesson.status === 'Completed') {
                        statusBadge = '<span class="badge bg-success">Completed</span>';
                    } else if (lesson.status === 'In Progress') {
                        statusBadge = '<span class="badge bg-primary">In Progress</span>';
                    } else {
                        statusBadge = '<span class="badge bg-secondary">Not Started</span>';
                    }
                    
                    $('#lessonProgressTable tbody').append(`
                        <tr>
                            <td>${lesson.name}</td>
                            <td>${statusBadge}</td>
                            <td>${lesson.date}</td>
                        </tr>
                    `);
                });
                
                // Show modal
                const studentDetailsModal = new bootstrap.Modal(document.getElementById('studentDetailsModal'));
                studentDetailsModal.show();
            });
            
            // Toggle student status
            $('.toggle-status-btn').on('click', function() {
                const enrollmentId = $(this).data('id');
                const currentStatus = $(this).data('status');
                const newStatus = currentStatus === 'Active' ? 'Suspended' : 'Active';
                const studentName = $(this).closest('tr').find('td:first-child').text();
                
                Swal.fire({
                    title: `${currentStatus === 'Active' ? 'Suspend' : 'Activate'} Student`,
                    text: `Are you sure you want to ${currentStatus === 'Active' ? 'suspend' : 'activate'} ${studentName}?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: `Yes, ${currentStatus === 'Active' ? 'suspend' : 'activate'} student!`,
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // In a real implementation, you'd update the student status via AJAX
                        
                        // For now, just show a success message
                        toastr.success(`Student ${currentStatus === 'Active' ? 'suspended' : 'activated'} successfully!`);
                    }
                });
            });
            
            // Remove student
            $('.remove-student-btn').on('click', function() {
                const enrollmentId = $(this).data('id');
                const studentName = $(this).data('name');
                
                Swal.fire({
                    title: 'Remove Student',
                    text: `Are you sure you want to remove ${studentName} from this course?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, remove student!',
                    confirmButtonColor: '#dc3545',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // In a real implementation, you'd remove the student via AJAX
                        
                        // For now, just show a success message
                        toastr.success(`Student removed from the course successfully!`);
                    }
                });
            });
            
            // Send message to student
            $('#sendMessageBtn').on('click', function() {
                const studentName = $('#studentName').text();
                const studentEmail = $('#studentEmail').text();
                
                bootbox.dialog({
                    title: `Send Message to ${studentName}`,
                    message: `
                        <form>
                            <div class="mb-3">
                                <label class="form-label">To:</label>
                                <input type="text" class="form-control" value="${studentEmail}" readonly>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Subject:</label>
                                <input type="text" class="form-control" placeholder="Enter subject">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Message:</label>
                                <textarea class="form-control" rows="5" placeholder="Type your message here..."></textarea>
                            </div>
                        </form>
                    `,
                    size: 'large',
                    buttons: {
                        cancel: {
                            label: 'Cancel',
                            className: 'btn-secondary'
                        },
                        send: {
                            label: 'Send Message',
                            className: 'btn-primary',
                            callback: function() {
                                // In a real implementation, you'd send the message via AJAX
                                
                                // For now, just show a success message
                                toastr.success(`Message sent to ${studentName} successfully!`);
                                return true;
                            }
                        }
                    }
                });
            });
            
            // Export data button
            $('#exportStudentsBtn').on('click', function() {
                $('#studentsTable').DataTable().button('.buttons-excel').trigger();
            });
        });
    </script>
}