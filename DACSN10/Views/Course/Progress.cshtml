@model DACSN10.Models.Enrollment
@{
    ViewData["Title"] = $"Tiến độ - {ViewBag.CourseName} - OnlineLearning";
    var progress = ViewBag.Progress ?? 0f;
    var courseId = ViewBag.CourseID ?? 0;
    var courseName = ViewBag.CourseName ?? "Khóa học";
    var totalLessons = ViewBag.TotalLessons ?? 0;
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/aos@2.3.1/dist/aos.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" />
    <link href="~/css/Progress.css" rel="stylesheet" />
}

<!-- Progress Header -->
<section class="progress-header">
    <div class="container-fluid px-4 px-md-5">
        <div class="progress-content">
            <div class="row align-items-center">
                <div class="col-lg-6" data-aos="fade-right">
                    <h1 class="display-5 fw-bold mb-3">@courseName</h1>
                    <p class="fs-5 mb-4 opacity-90">
                        Theo dõi tiến độ học tập và hoàn thành khóa học của bạn
                    </p>
                    
                    <div class="d-flex align-items-center gap-3 mb-3">
                        <i class="fas fa-calendar-alt"></i>
                        <span>Ngày đăng ký: @Model.EnrollDate.ToString("dd/MM/yyyy")</span>
                    </div>
                    
                    <div class="d-flex align-items-center gap-3">
                        <i class="fas fa-clock"></i>
                        <span>Tổng số bài học: @totalLessons</span>
                    </div>
                </div>

                <div class="col-lg-6" data-aos="fade-left">
                    <div class="progress-circle">
                        <div class="progress-text">
                            <div class="progress-percentage">@progress.ToString("F0")%</div>
                            <div class="progress-label">Hoàn thành</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="container-fluid px-4 px-md-5">
    <!-- Dashboard Cards -->
    <div class="dashboard-cards" data-aos="fade-up">
        <div class="dashboard-card">
            <div class="dashboard-icon" style="background: linear-gradient(135deg, #10b981 0%, #059669 100%);">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="dashboard-number" id="completedLessons">0</div>
            <div class="dashboard-label">Bài học hoàn thành</div>
        </div>
        
        <div class="dashboard-card">
            <div class="dashboard-icon" style="background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);">
                <i class="fas fa-play-circle"></i>
            </div>
            <div class="dashboard-number">@totalLessons</div>
            <div class="dashboard-label">Tổng bài học</div>
        </div>
        
        <div class="dashboard-card">
            <div class="dashboard-icon" style="background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);">
                <i class="fas fa-clock"></i>
            </div>
            <div class="dashboard-number" id="studyTime">0</div>
            <div class="dashboard-label">Giờ học (phút)</div>
        </div>
        
        <div class="dashboard-card">
            <div class="dashboard-icon" style="background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);">
                <i class="fas fa-trophy"></i>
            </div>
            <div class="dashboard-number" id="achievements">0</div>
            <div class="dashboard-label">Thành tích</div>
        </div>
    </div>

    <div class="row">
        <!-- Lessons Progress -->
        <div class="col-lg-8">
            <div class="lesson-tracker" data-aos="fade-up">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">Danh sách bài học</h5>
                    <button class="btn btn-sm btn-outline-primary" onclick="markAllComplete()">
                        <i class="fas fa-check-double me-1"></i>Đánh dấu tất cả
                    </button>
                </div>
                
                <div id="lessonsContainer">
                    @if (Model.Course.Lessons != null && Model.Course.Lessons.Any())
                    {
                        @foreach (var lesson in Model.Course.Lessons.OrderBy(l => l.LessonID))
                        {
                            <div class="lesson-item" data-lesson-id="@lesson.LessonID" onclick="toggleLesson(@lesson.LessonID)">
                                <div class="lesson-checkbox">
                                    <i class="fas fa-check" style="display: none;"></i>
                                </div>
                                <div class="lesson-icon">
                                    <i class="fas fa-play"></i>
                                </div>
                                <div class="lesson-content">
                                    <div class="lesson-title">@lesson.TenBaiHoc</div>
                                    <div class="lesson-duration">
                                        <i class="fas fa-clock me-1"></i>@lesson.ThoiLuong phút
                                    </div>
                                </div>
                                <button class="lesson-play-btn" onclick="playLesson(event, @lesson.LessonID)">
                                    <i class="fas fa-play me-1"></i>Học
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-play-circle fa-3x text-muted mb-3"></i>
                            <p class="text-muted">Chưa có bài học nào</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Achievements -->
            <div class="achievement-section" data-aos="fade-up">
                <h5 class="mb-3">Thành tích đạt được</h5>
                <div id="achievementsContainer">
                    <!-- Achievements will be loaded here -->
                </div>
                <div class="text-center text-muted" id="noAchievements">
                    <i class="fas fa-trophy fa-2x mb-2"></i>
                    <p>Hoàn thành bài học để nhận thành tích!</p>
                </div>
            </div>

            <!-- Study Calendar -->
            <div class="study-calendar" data-aos="fade-up">
                <h5 class="mb-3">Lịch học tập</h5>
                <div id="studyCalendar"></div>
            </div>
        </div>
    </div>

    <!-- Progress Chart -->
    <div class="chart-container" data-aos="fade-up">
        <h5 class="mb-3">Biểu đồ tiến độ theo thời gian</h5>
        <canvas id="progressChart" height="100"></canvas>
    </div>

    <!-- Action Buttons -->
    <div class="action-buttons" data-aos="fade-up">
        <a href="@Url.Action("MyCourses")" class="btn-back-large">
            <i class="fas fa-arrow-left me-2"></i>Quay lại
        </a>
        <a href="@Url.Action("Details", new { id = courseId })" class="btn-continue-large">
            <i class="fas fa-info-circle me-2"></i>Chi tiết khóa học
        </a>
    </div>
</div>

<!-- Milestone Badge -->
<div class="milestone-badge" id="milestoneBadge">
    <div class="milestone-icon">
        <i class="fas fa-trophy"></i>
    </div>
    <h4>Chúc mừng!</h4>
    <p>Bạn đã hoàn thành một cột mốc quan trọng!</p>
</div>

@section Scripts {
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Initialize AOS
        AOS.init({
            duration: 1000,
            easing: 'ease-out-quart',
            once: true
        });

        // Global variables
        let completedLessonsCount = 0;
        let totalStudyTime = 0;
        let achievementsCount = 0;
        let progressData = [];

        $(document).ready(function() {
            // Initialize components
            initializeProgress();
            initializeCalendar();
            initializeChart();
            loadAchievements();
            
            // Update counters with animation
            updateCounters();
        });

        function initializeProgress() {
            const currentProgress = @progress;
            const totalLessons = @totalLessons;
            
            // Calculate completed lessons based on progress
            completedLessonsCount = Math.floor((currentProgress / 100) * totalLessons);
            
            // Simulate completed lessons in UI
            const lessons = $('.lesson-item');
            for (let i = 0; i < completedLessonsCount; i++) {
                $(lessons[i]).addClass('completed');
                $(lessons[i]).find('.lesson-checkbox i').show();
            }
            
            // Calculate total study time
            $('.lesson-item.completed').each(function() {
                const duration = parseInt($(this).find('.lesson-duration').text());
                totalStudyTime += duration;
            });
        }

        function updateCounters() {
            animateCounter($('#completedLessons'), completedLessonsCount);
            animateCounter($('#studyTime'), totalStudyTime);
            animateCounter($('#achievements'), achievementsCount);
        }

        function animateCounter(element, target) {
            let current = 0;
            const increment = target / 30;
            const timer = setInterval(() => {
                current += increment;
                if (current >= target) {
                    current = target;
                    clearInterval(timer);
                }
                element.text(Math.floor(current));
            }, 50);
        }

        function toggleLesson(lessonId) {
            const lessonItem = $(`.lesson-item[data-lesson-id="${lessonId}"]`);
            const isCompleted = lessonItem.hasClass('completed');
            
            if (!isCompleted) {
                // Mark as completed
                lessonItem.addClass('completed');
                lessonItem.find('.lesson-checkbox i').show();
                
                // Update progress
                updateProgress(lessonId);
                
                // Add study time
                const duration = parseInt(lessonItem.find('.lesson-duration').text());
                totalStudyTime += duration;
                $('#studyTime').text(totalStudyTime);
                
                // Check for achievements
                checkAchievements();
                
                // Show completion animation
                showCompletionAnimation(lessonItem);
            }
        }

        function playLesson(event, lessonId) {
            event.stopPropagation();
            
            Swal.fire({
                title: 'Đang mở bài học...',
                text: 'Bài học sẽ được mở trong tab mới',
                icon: 'info',
                timer: 2000,
                showConfirmButton: false
            });
            
            // Simulate opening lesson
            setTimeout(() => {
                toggleLesson(lessonId);
            }, 1000);
        }

        function updateProgress(lessonId) {
            $.post('@Url.Action("UpdateProgress")', {
                courseId: @courseId,
                lessonId: lessonId,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            })
            .done(function(response) {
                if (response.success) {
                    // Update progress circle
                    updateProgressCircle(response.progress);
                    
                    // Update completed lessons counter
                    completedLessonsCount++;
                    $('#completedLessons').text(completedLessonsCount);
                    
                    toastr.success(response.message);
                } else {
                    toastr.error(response.message);
                }
            })
            .fail(function() {
                toastr.error('Có lỗi xảy ra khi cập nhật tiến độ');
            });
        }

        function updateProgressCircle(newProgress) {
            const circle = $('.progress-circle');
            const newGradient = `conic-gradient(#ffffff ${newProgress * 3.6}deg, rgba(255,255,255,0.3) ${newProgress * 3.6}deg)`;
            circle.css('background', newGradient);
            $('.progress-percentage').text(Math.round(newProgress) + '%');
        }

        function markAllComplete() {
            Swal.fire({
                title: 'Đánh dấu tất cả hoàn thành?',
                text: 'Bạn có chắc muốn đánh dấu tất cả bài học là đã hoàn thành?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#10b981',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Đồng ý',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    $('.lesson-item:not(.completed)').each(function() {
                        const lessonId = $(this).data('lesson-id');
                        toggleLesson(lessonId);
                    });
                    
                    // Show completion milestone
                    showMilestone('Hoàn thành khóa học!', 'Chúc mừng bạn đã hoàn thành tất cả bài học!');
                }
            });
        }

        function showCompletionAnimation(lessonItem) {
            // Add completion effect
            lessonItem.addClass('animate__animated animate__pulse');
            
            // Remove animation class after animation completes
            setTimeout(() => {
                lessonItem.removeClass('animate__animated animate__pulse');
            }, 1000);
        }

        function checkAchievements() {
            const progress = (completedLessonsCount / @totalLessons) * 100;
            
            // Check for milestone achievements
            if (progress >= 25 && !hasAchievement('first-quarter')) {
                addAchievement('first-quarter', 'Hoàn thành 25%', 'Bạn đã hoàn thành 1/4 khóa học!');
                showMilestone('Hoàn thành 25%!', 'Bạn đang trên đường đạt được mục tiêu!');
            }
            
            if (progress >= 50 && !hasAchievement('half-way')) {
                addAchievement('half-way', 'Hoàn thành 50%', 'Bạn đã hoàn thành nửa khóa học!');
                showMilestone('Hoàn thành 50%!', 'Bạn đã đi được nửa chặng đường!');
            }
            
            if (progress >= 75 && !hasAchievement('three-quarters')) {
                addAchievement('three-quarters', 'Hoàn thành 75%', 'Chỉ còn một chút nữa thôi!');
                showMilestone('Hoàn thành 75%!', 'Sắp đến đích rồi!');
            }
            
            if (progress >= 100 && !hasAchievement('completed')) {
                addAchievement('completed', 'Hoàn thành khóa học', 'Chúc mừng bạn đã hoàn thành khóa học!');
                showMilestone('Hoàn thành khóa học!', 'Bạn đã chinh phục thành công khóa học này!');
            }
        }

        function hasAchievement(achievementId) {
            return $(`#achievement-${achievementId}`).length > 0;
        }

        function addAchievement(id, title, description) {
            const achievement = `
                <div class="achievement-item" id="achievement-${id}">
                    <div class="achievement-icon">
                        <i class="fas fa-trophy"></i>
                    </div>
                    <div>
                        <div class="fw-bold">${title}</div>
                        <div class="small">${description}</div>
                    </div>
                </div>
            `;
            
            $('#noAchievements').hide();
            $('#achievementsContainer').append(achievement);
            achievementsCount++;
            $('#achievements').text(achievementsCount);
        }

        function showMilestone(title, message) {
            $('#milestoneBadge h4').text(title);
            $('#milestoneBadge p').text(message);
            $('#milestoneBadge').fadeIn(500);
            
            // Auto hide after 3 seconds
            setTimeout(() => {
                $('#milestoneBadge').fadeOut(500);
            }, 3000);
        }

        function loadAchievements() {
            // Load existing achievements based on current progress
            const progress = @progress;
            
            if (progress >= 25) {
                addAchievement('first-quarter', 'Hoàn thành 25%', 'Bạn đã hoàn thành 1/4 khóa học!');
            }
            if (progress >= 50) {
                addAchievement('half-way', 'Hoàn thành 50%', 'Bạn đã hoàn thành nửa khóa học!');
            }
            if (progress >= 75) {
                addAchievement('three-quarters', 'Hoàn thành 75%', 'Chỉ còn một chút nữa thôi!');
            }
            if (progress >= 100) {
                addAchievement('completed', 'Hoàn thành khóa học', 'Chúc mừng bạn đã hoàn thành khóa học!');
            }
        }

        function initializeCalendar() {
            const calendarEl = document.getElementById('studyCalendar');
            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                height: 'auto',
                events: [
                    {
                        title: 'Bắt đầu khóa học',
                        date: '@Model.EnrollDate.ToString("yyyy-MM-dd")',
                        color: '#3b82f6'
                    },
                    {
                        title: 'Học tập hôm nay',
                        date: new Date().toISOString().split('T')[0],
                        color: '#10b981'
                    }
                ],
                headerToolbar: {
                    left: 'prev,next',
                    center: 'title',
                    right: 'today'
                }
            });
            calendar.render();
        }

        function initializeChart() {
            const ctx = document.getElementById('progressChart').getContext('2d');
            
            // Generate sample progress data
            const days = 30;
            const labels = [];
            const data = [];
            
            for (let i = days; i >= 0; i--) {
                const date = new Date();
                date.setDate(date.getDate() - i);
                labels.push(date.toLocaleDateString('vi-VN'));
                
                // Simulate progress over time
                const progressValue = Math.min(@progress, (days - i) * (@progress / days));
                data.push(progressValue);
            }
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Tiến độ (%)',
                        data: data,
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                }
                            }
                        },
                        x: {
                            ticks: {
                                maxTicksLimit: 7
                            }
                        }
                    }
                }
            });
        }

        // Configure toastr
        toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "timeOut": 3000
        };
    </script>

    @Html.AntiForgeryToken()
}